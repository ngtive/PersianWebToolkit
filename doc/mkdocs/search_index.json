{
    "docs": [
        {
            "location": "/persian-date/", 
            "text": "Persian Date\n\n\nJavascript date library for parsing, validating, manipulating, and formatting Persian dates System.\n\n\n\n\nfrom 1.0.0 persian date support gregorian calendar.\n\n\n\n\nInspired by \nmomentjs\n\n\nMore info at \nwikipedia\n\n\n\n\n\n\n\n\n\n\nStar\n\n\nIssue\n\n\nFork\n\n\nInstall\n\n\nnpm install persian-date --save-dev\nbower install persian-date --save-dev\n\n\n\n\n\nBrowser\n\n\nscript\n \nsrc\n=\nnode_modules/persian-date/dist/persian-date.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \ntype\n=\ntext/javascript\n\n    \nnew\n \npersianDate\n().\nformat\n();\n \n// \n\u06f1\u06f3\u06f9\u06f6-\u06f0\u06f1-\u06f1\u06f1 \u06f2\u06f3:\u06f3\u06f3:\u06f2\u06f7 \u0628 \u0638\n (when i run in my console)  \n\n\n/\nscript\n\n\n\n\n\n\nWebpack\n\n\nrequire(\npersian-date\n);\n\n\n\n\n\nCalendar and locale\n\n\ntoCalendar\n\n\ndefault: \npersian\n\n\navailable option: \npersian\n \ngregorian\n\n\nfrom version 1.0.* \npersianDate\n have an option that allows developers to set calendar type of Date object.\n\n\nyou can change calendar type globally or only in specific object\n\n\nif you want change calendar type globally:\n\n\npersianDate\n.\ntoCalendar\n(\ngregorian\n);\n\n\nnew\n \npersianDate\n([\n2017\n]).\nyear\n();\n \n// 2017\n\n\nnew\n \npersianDate\n([\n2017\n]).\nformat\n(\nMMM\n);\n \n// \n\u0698\u0627\u0646\u0648\u06cc\u0647\n\n\n\n\n\n\nor only on instance:\n\n\nnew\n \npersianDate\n([\n1396\n]).\ntoCalendar\n(\ngregorian\n).\nyear\n();\n \n// 2017\n\n\n\n\n\n\ntoLeapYearMode\n\n\ndefault: \nalgorithmic\n\n\navailable option: \nalgorithmic\n, \nastronomical\n\n\nThere is two popular way to determining leap years for the Persian calendar. \n\n\n\n\n\n\nastronomical: occur whenever that number of days elapsed between equinoxes at the reference meridian.\n\n\n\n\n\n\nalgorithmic: based on Behrooz-Birashk proposed algorithm.\n\n\n\n\n\n\nAfter version 1.0.* \npersianDate\n support both algorithms and you can choose which algorithm use in your project. \ncurrently, we have support 2 type of leap year mode \nalgorithmic\n, \nastronomical\n.\n\n\nyou can change it globally like this example\n\n\npersianDate\n.\ntoLeapYearMode\n(\nalgorithmic\n)\n\n\n\n\n\n\nor change it in you instance\n\n\nnew\n \npersianDate\n().\ntoLeapYearMode\n(\nalgorithmic\n)\n\n\n\n\n\n\n\n\ntoLeapYearMode\n only work when calendar type is \npersian\n, and doesnt any effect on \ngregorian\n calendar\n\n\n\n\ntoLocale\n\n\ndefault: \nfa\n\n\navailable option: \nfa\n \nen\n\n\nif you want change locale globally:\n\n\npersianDate\n.\ntoLocale\n(\nfa\n);\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\nformat\n();\n \n// \n\u06f1\u06f3\u06f9\u06f6-\u06f0\u06f6-\u06f1\u06f7 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\nformat\n(\ndddd\n);\n \n// \n\u062c\u0645\u0639\u0647\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\nformat\n(\nMMMM\n);\n \n// \n\u0634\u0647\u0631\u06cc\u0648\u0631\n\n\n\npersianDate\n.\ntoLocale\n(\nen\n);\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\nformat\n();\n \n// \n1396-06-17 00:00:00 AM\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\nformat\n(\ndddd\n);\n \n// \nFriday\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\nformat\n(\nMMMM\n);\n \n// \nShahrivar\n\n\n\n\n\n\nor only on instance:\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\ntoLocale\n(\nfa\n).\nformat\n();\n \n// \n\u06f1\u06f3\u06f9\u06f6-\u06f0\u06f6-\u06f1\u06f7 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\ntoLocale\n(\nfa\n).\nformat\n(\ndddd\n);\n \n// \n\u062c\u0645\u0639\u0647\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\ntoLocale\n(\nfa\n).\nformat\n(\nMMMM\n);\n \n// \n\u0634\u0647\u0631\u06cc\u0648\u0631\n\n\n\npersianDate\n.\ntoCalendar\n(\ngregorian\n);\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\ntoLocale\n(\nen\n).\nformat\n();\n \n// \n1397-07-07 00:00:00 AM\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\ntoLocale\n(\nen\n).\nformat\n(\ndddd\n);\n \n// \nFriday\n\n\nnew\n \npersianDate\n([\n1396\n,\n6\n,\n17\n]).\ntoLocale\n(\nen\n).\nformat\n(\nMMMM\n);\n \n// \nJune\n\n\n\n\n\n\n\n\nafter version 1.0.*, you must use \ntoLocale\n instead \nformatPersian\n, for show persian or english digit.\n\n\n\n\nParse\n\n\nInstead of modifying the native \nDate.prototype\n , persianDate creates a wrapper for the Date object.\nTo get this wrapper object, simply call \npersianDate()\n with one of the supported input types.\n\n\nNow\n\n\nnew\n \npersianDate\n();\n\n\n\n\n\n\nTo get the current date and time, just call \npersianDate()\n with no parameters.\n\n\nvar\n \nnow\n \n=\n \nnew\n \npersianDate\n();\n\n\n\n\n\n\nThis is essentially the same as calling \nnew persianDate(new Date())\n .\n\n\nUnix Offset (milliseconds)\n\n\nnew\n \npersianDate\n(\n/* Number */\n);\n\n\n\n\n\n\nSimilar to \nnew Date(Number)\n, you can create a persianDate by passing an integer value representing the number of milliseconds since the Unix Epoch (Jan 1 1970 12AM UTC).\n\n\nvar\n \nday\n \n=\n \nnew\n \npersianDate\n(\n1318781876406\n);\n \n// \n\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f1\u06f9:\u06f4\u06f7:\u06f5\u06f6 \u0628 \u0638\n\n\n\n\n\n\nUnix Timestamp (seconds)\n\n\npersianDate\n.\nunix\n(\n/* Number */\n);\n\n\n\n\n\n\nTo create a persianDate from a Unix timestamp (seconds since the Unix Epoch), use \npersianDate.unix(Number)\n\n\nvar\n \nday\n \n=\n \nnew\n \npersianDate\n.\nunix\n(\n1318781876\n);\n \n// \n\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f1\u06f9:\u06f4\u06f7:\u06f5\u06f6 \u0628 \u0638\n\n\n\n\n\n\nThis is implemented as \npersianDate(timestamp * 1000)\n , so partial seconds in the input timestamp are included.\n\n\nDate\n\n\n\n\n\nnew\n \npersianDate\n(\nnew\n \nDate\n());\n\n\n\n\n\n\nYou can create a \npersianDate\n with a pre-existing native Javascript \nDate\n object.\n\n\n\n\n\nvar\n \nday\n \n=\n \nnew\n \nDate\n(\n2011\n,\n \n9\n,\n \n16\n);\n\n\nvar\n \ndayWrapper\n \n=\n \nnew\n \npersianDate\n(\nday\n);\n \n// \n\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\n\n\n\n\n\n\nThis is the fastest way to get a persianDate.js wrapper.\n\n\nArray\n\n\n\n\n['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond']\n\n\n\n\nnew\n \npersianDate\n([\n1391\n,\n \n12\n,\n \n29\n,\n \n12\n,\n \n25\n,\n \n25\n,\n \n900\n]);\n\n\n\n\n\n\nYou can create a persianDate with an array of numbers that mirror the parameters passed to new \nDate()\n But As Persian Date Number Like [1393,2,22,11,22,30]\n\n\nnew\n \npersianDate\n([\n1393\n,\n \n1\n,\n \n14\n,\n \n15\n,\n25\n,\n \n50\n,\n125\n]);\n \n// \n\u06f1\u06f3\u06f9\u06f3-\u06f0\u06f1-\u06f1\u06f4 \u06f1\u06f5:\u06f2\u06f5:\u06f5\u06f0 \u0628 \u0638\n\n\n\n\n\n\nAny value past the year is optional, and will default to the lowest possible number.\n\n\nnew\n \npersianDate\n([\n1392\n]);\n \n// Farvardin 1st\n\n\nnew\n \npersianDate\n([\n1392\n,\n \n6\n]);\n \n// Shahrivar 1st\n\n\nnew\n \npersianDate\n([\n1392\n,\n \n6\n,\n \n10\n]);\n \n// Shahrivar 10th\n\n\n\n\n\n\n\n\nNote: from 1.0.* you can pass gregorian date array to create gregorian date object. for this functionality you must change date object calendar type by \ntoCalendar('gregorian')\n\n\n\n\nexample:\n\n\npersianDate\n.\ntoCalendar\n(\ngregorian\n);\n\n\nnew\n \npersianDate\n([\n2017\n,\n2\n,\n2\n]).\nformat\n();\n \n// \n\u06f2\u06f0\u06f1\u06f7-\u06f0\u06f2-\u06f0\u06f2 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\n\n\n\n\n\n\nASP.NET JSON Date\n\n\nnew persianDate(String);\n\n\n\n\n\nASP.NET returns dates in JSON as \n/Date(1198908717056)/\n or \n/Date(1198908717056-0700)/\n\n\nIf a string that matches this format is passed in, it will be parsed correctly.\n\n\nnew\n \npersianDate\n(\n/Date(1198908717056-0700)/\n);\n \n//\n\u06f1\u06f3\u06f8\u06f6-\u06f1\u06f0-\u06f0\u06f8 \u06f0\u06f9:\u06f4\u06f1:\u06f5\u06f7 \u0642 \u0638\n\n\n\n\n\n\nPesianDate Clone\n\n\nnew persianDate(persianDate);\n\n\n\n\n\nAll persianDate are mutable. If you want a clone of a persianDate, you can do so explicitly or implicitly.\nCalling \npersianDate()\n on a persianDate will clone it.\n\n\n\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1392\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n(\na\n);\n\n\na\n.\nyear\n(\n1300\n);\n\n\nb\n.\nyear\n();\n \n// 1392\n\n\n\n\n\n\n\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1392\n]);\n\n\nvar\n \nb\n \n=\n \na\n.\nclone\n();\n\n\na\n.\nyear\n(\n1300\n);\n\n\nb\n.\nyear\n();\n \n// 1392\n\n\n\n\n\n\nGet + Set\n\n\npersainDate.js uses overloaded getters and setters. You may be familiar with this pattern from it's use in jQuery.\n\n\nCalling these methods without parameters acts as a getter, and calling them with a parameter acts as a setter.\n\n\nThese map to the corresponding function on the native \nDate\n object.\n\n\nnew\n \npersianDate\n().\nseconds\n(\n30\n).\nvalueOf\n()\n \n===\n \nnew\n \nDate\n().\nsetSeconds\n(\n30\n);\n \n// true\n\n\nnew\n \npersianDate\n().\nseconds\n()\n \n===\n \nnew\n \nDate\n().\ngetSeconds\n();\n \n// true\n\n\n\n\n\n\nMillisecond\n\n\nnew\n \npersianDate\n().\nmillisecond\n(\n100\n);\n\n\nnew\n \npersianDate\n().\nmillisecond\n();\n \n// 100\n\n\nnew\n \npersianDate\n().\nmilliseconds\n(\n100\n);\n\n\nnew\n \npersianDate\n().\nmilliseconds\n();\n \n// 100\n\n\n\n\n\n\nGets or sets the milliseconds.\n\n\nAccepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the seconds.\n\n\nSecond\n\n\nnew\n \npersianDate\n().\nsecond\n(\n10\n);\n\n\nnew\n \npersianDate\n().\nsecond\n();\n \n// 10\n\n\nnew\n \npersianDate\n().\nseconds\n(\n10\n);\n\n\nnew\n \npersianDate\n().\nseconds\n();\n \n// 10\n\n\n\n\n\n\nGets or sets the seconds.\n\n\nAccepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the minutes.\n\n\nMinute\n\n\nnew\n \npersianDate\n().\nminute\n(\n20\n);\n\n\nnew\n \npersianDate\n().\nminute\n();\n \n// 20\n\n\nnew\n \npersianDate\n().\nminutes\n(\n20\n);\n\n\nnew\n \npersianDate\n().\nminutes\n();\n \n// 20\n\n\n\n\n\n\nGets or sets the minutes.\n\n\nAccepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the hours.\n\n\nHour\n\n\nnew\n \npersianDate\n().\nhour\n(\n12\n);\n\n\nnew\n \npersianDate\n().\nhour\n();\n \n// 12\n\n\nnew\n \npersianDate\n().\nhours\n(\n12\n);\n\n\nnew\n \npersianDate\n().\nhours\n();\n \n// 12\n\n\n\n\n\n\nGets or sets the hour.\n\n\nAccepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the day.\n\n\nDate of Month\n\n\nnew\n \npersianDate\n().\ndate\n(\n23\n);\n\n\nnew\n \npersianDate\n().\ndate\n();\n \n// 23\n\n\nnew\n \npersianDate\n().\ndates\n(\n23\n);\n\n\nnew\n \npersianDate\n().\ndates\n();\n \n// 23\n\n\n\n\n\n\nGets or sets the day of the month.\n\n\nAccepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the months.\n\n\n\n\nNote: persianDate#date is for the date of the month, and persianDate#day is for the day of the week.\n\n\n\n\nYear\n\n\nnew\n \npersianDate\n().\nyear\n(\n1390\n);\n\n\nnew\n \npersianDate\n().\nyear\n();\n \n// 1390\n\n\nnew\n \npersianDate\n().\nyears\n(\n1390\n);\n\n\nnew\n \npersianDate\n().\nyears\n();\n \n// 1390\n\n\n\n\n\n\nGets or sets the year.\n\n\nAccepts numbers from -270,000 to 270,000.\n\n\nDay of Week\n\n\nnew\n \npersianDate\n().\nday\n();\n \n// Number\n\n\nnew\n \npersianDate\n().\ndays\n();\n \n// Number\n\n\n\n\n\n\nGets the day of the week.\n\n\n\n\nNote: \npersianDate#date\n is for the date of the month, and \npersianDate#day\n is for the day of the week.\n\n\n\n\nManipulate\n\n\nOnce you have a PersianDate , you may want to manipulate it in some way. There are a number of methods to help with this.\n\n\npersianDate.js uses the \nfluent interface pattern\n,\n also known as \nmethod chaining\n. This allows you to do crazy things like the following.\n\n\nnew\n \npersianDate\n().\nadd\n(\ndays\n,\n \n7\n).\nsubtract\n(\nmonths\n,\n \n1\n).\nyear\n(\n2009\n).\nhours\n(\n0\n).\nminutes\n(\n0\n).\nseconds\n(\n0\n);\n\n\n\n\n\n\n\n\nNote: It should be noted that persianDates are mutable. Calling any of the manipulation methods will change the original persianDate.\n\n\n\n\nIf you want to create a copy and manipulate it, you should use \npersianDate#clone\n before manipulating the persianDate.\n\n\nAdd\n\n\n\n\n\nnew\n \npersianDate\n().\nadd\n(\nString\n,\n \nNumber\n);\n\n\n\n\n\n\nMutates the original persianDate by adding time.\n\n\nThis is a pretty robust function for adding time to an existing persianDate. To add time, pass the key of what time you want to add, and the amount you want to add.\n\n\nnew\n \npersianDate\n().\nadd\n(\ndays\n,\n \n7\n);\n\n\n\n\n\n\nThere are some shorthand keys as well if you're into that whole brevity thing.\n\n\nnew\n \npersianDate\n().\nadd\n(\nd\n,\n \n7\n);\n\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nAlternate\n\n\nShorthand\n\n\n\n\n\n\n\n\n\n\nyears\n\n\nyear\n\n\ny\n\n\n\n\n\n\nmonths\n\n\nmonth\n\n\nM\n\n\n\n\n\n\nweeks\n\n\nweek\n\n\nw\n\n\n\n\n\n\ndays\n\n\nday\n\n\nd\n\n\n\n\n\n\nhours\n\n\nhour\n\n\nh\n\n\n\n\n\n\nminutes\n\n\nminute\n\n\nm\n\n\n\n\n\n\nseconds\n\n\nsecond\n\n\ns\n\n\n\n\n\n\nmilliseconds\n\n\nmillisecond\n\n\nms\n\n\n\n\n\n\n\n\nIf you want to add multiple different keys at the same time, you can pass them in as an object literal.\n\n\nnew\n \npersianDate\n().\nadd\n(\ndays\n,\n \n7\n).\nadd\n(\nmonths\n,\n \n1\n);\n \n// with chaining\n\n\n\n\n\n\nThere are no upper limits for the amounts, so you can overload any of the parameters.\n\n\nnew\n \npersianDate\n().\nadd\n(\nmilliseconds\n,\n \n1000000\n);\n \n// a million milliseconds\n\n\nnew\n \npersianDate\n().\nadd\n(\ndays\n,\n \n360\n);\n \n// 360 days\n\n\n\n\n\n\nSubtract\n\n\n\n\n\nnew\n \npersianDate\n().\nsubtract\n(\nString\n,\n \nNumber\n);\n\n\n\n\n\n\nMutates the original persianDate by subtracting time.\n\n\nThis is exactly the same as \npersianDate#add\n , only instead of adding time, it subtracts time.\n\n\nnew\n \npersianDate\n().\nsubtract\n(\ndays\n,\n \n7\n);\n\n\n\n\n\n\nStart of Time\n\n\n\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nString\n);\n\n\n\n\n\n\nMutates the original persianDate by setting it to the start of a unit of time.\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nyear\n);\n   \n// set to Farvardin 1st, 12:00 am this year\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nmonth\n);\n  \n// set to the first of this month, 12:00 am\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nweek\n);\n   \n// set to the first day of this week, 12:00 am\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nday\n);\n    \n// set to 12:00 am today\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nhour\n);\n   \n// set to now, but with 0 mins, 0 secs, and 0 ms\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nminute\n);\n \n// set to now, but with 0 seconds and 0 milliseconds\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nsecond\n);\n \n// same as persianDate().milliseconds(0);\n\n\n\n\n\n\nThese shortcuts are essentially the same as the following.\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nyear\n);\n\n\nnew\n \npersianDate\n().\nmonth\n(\n1\n).\ndate\n(\n1\n).\nhours\n(\n0\n).\nminutes\n(\n0\n).\nseconds\n(\n0\n).\nmilliseconds\n(\n0\n);\n\n\n\n\n\n\nnew\n \npersianDate\n().\nstartOf\n(\nhour\n);\n\n\nnew\n \npersianDate\n().\nminutes\n(\n0\n).\nseconds\n(\n0\n).\nmilliseconds\n(\n0\n)\n\n\n\n\n\n\nEnd of Time\n\n\nnew\n \npersianDate\n().\nendOf\n(\nString\n);\n\n\n\n\n\n\nMutates the original persianDate by setting it to the end of a unit of time.\n\n\nThis is the same as \npersianDate#startOf\n , only instead of setting to the start of a unit of time, it sets to the end of a unit of time.\n\n\nnew\n \npersianDate\n().\nendOf\n(\nyear\n);\n \n// set the persianDate to 12-31 11:59:59.999 pm this year\n\n\n\n\n\n\nDisplay\n\n\nOnce parsing and manipulation are done, you need some way to display the persianDate.\n\n\nFormat\n\n\nnew\n \npersianDate\n().\nformat\n();\n\n\nnew\n \npersianDate\n().\nformat\n(\nstring\n);\n\n\n\n\n\n\nThis is the most robust display option. It takes a string of tokens and replaces them with their corresponding values.\n\n\nnew\n \npersianDate\n().\nformat\n(\ndddd, MMMM DD YYYY, h:mm:ss a\n);\n \n// \n\u0634\u0646\u0628\u0647, \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 \u06f1\u06f2 \u06f1\u06f3\u06f9\u06f6, \u06f5:\u06f5\u06f4:\u06f1\u06f1 \u0628 \u0638\n\n\nnew\n \npersianDate\n().\nformat\n(\ndddd, ha\n);\n \n// \n\u0634\u0646\u0628\u0647, \u06f5\u0628 \u0638\n\n\n\n\n\n\nThis is the most robust display option. It takes a string of tokens and replaces them with their corresponding values.\n\n\n\n\n\n\n\n\nType\n\n\nTocken\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\nMonth\n\n\nM\n\n\n\u06f1 \u06f2 ... \u06f1\u06f1 \u06f1\u06f2\n\n\n\n\n\n\n\n\nMM\n\n\n\u06f0\u06f1 \u06f0\u06f2 ... \u06f1\u06f1 \u06f1\u06f2\n\n\n\n\n\n\n\n\nMMM\n\n\n\u0641\u0631\u0648 \u0627\u0631\u062f ... \u0627\u0633\u0641\n\n\n\n\n\n\n\n\nMMMM\n\n\n\u0641\u0631\u0648\u0631\u062f\u06cc\u0646 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a ... \u0627\u0633\u0641\u0646\u062f\n\n\n\n\n\n\nDay of month\n\n\nD\n\n\n\u06f1 \u06f2 ... \u06f3\u06f0 \u06f3\u06f1\n\n\n\n\n\n\n\n\nDD\n\n\n\u06f0\u06f1 \u06f0\u06f2 ... \u06f3\u06f0 \u06f3\u06f1\n\n\n\n\n\n\nDay of year\n\n\nDDD\n\n\n\u06f1 \u06f2 ... \u06f3\u06f6\u06f4 \u06f3\u06f6\u06f5\n\n\n\n\n\n\n\n\nd\n\n\n\u06f0 \u06f1 ... \u06f5 \u06f6\n\n\n\n\n\n\n\n\ndd\n\n\n\u0634 \u06cc ... \u062c\n\n\n\n\n\n\n\n\nddd\n\n\n\u0634\u0646\u0628\u0647 \u06cc\u06a9\u0634\u0646\u0628\u0647 ... \u062c\u0645\u0639\u0647\n\n\n\n\n\n\n\n\ndddd\n\n\n\u0627\u0646\u0627\u0631\u0627\u0645 \u0645\u0627\u0646\u062a\u0631\u0647 \u0633\u067e\u0646\u062f ... \u0627\u0634\u062a\u0627\u062f\n\n\n\n\n\n\nWeek of Year\n\n\nw\n\n\n\u06f1 \u06f2 ... \u06f5\u06f2 \u06f5\u06f3\n\n\n\n\n\n\n\n\nww\n\n\n\u06f0\u06f1 \u06f0\u06f2 ... \u06f5\u06f2 \u06f5\u06f3\n\n\n\n\n\n\nYear\n\n\nYY\n\n\n\u06f6\u06f6 \u06f9\u06f1 ... \u06f9\u06f8 \u06f3\u06f0\n\n\n\n\n\n\n\n\nYYY\n\n\n\u06f1\u06f3\u06f6\u06f6 \u06f1\u06f3\u06f9\u06f1 ... \u06f1\u06f3\u06f9\u06f8 \u06f1\u06f4\u06f0\u06f1\n\n\n\n\n\n\nAM/PM\n\n\na\n\n\n\"\u0642 \u0638\", \"\u0628 \u0638\"\n\n\n\n\n\n\nHour\n\n\nH\n\n\n\u06f0 \u06f1 ... \u06f2\u06f2 \u06f2\u06f3\n\n\n\n\n\n\n\n\nHH\n\n\n\u06f0\u06f0 \u06f0\u06f1 ... \u06f2\u06f2 \u06f2\u06f3\n\n\n\n\n\n\n\n\nh\n\n\n\u06f1 \u06f2 ... \u06f1\u06f1 \u06f1\u06f2\n\n\n\n\n\n\n\n\nhh\n\n\n\u06f0\u06f1 \u06f0\u06f2 ... \u06f1\u06f1 \u06f1\u06f2\n\n\n\n\n\n\nMinute\n\n\nm\n\n\n\u06f0 \u06f1 ... \u06f5\u06f8 \u06f5\u06f9\n\n\n\n\n\n\n\n\nmm\n\n\n\u06f0\u06f0 \u06f0\u06f1 ... \u06f5\u06f8 \u06f5\u06f9\n\n\n\n\n\n\nSecond\n\n\ns\n\n\n\u06f0 \u06f1 ... \u06f5\u06f8 \u06f5\u06f9\n\n\n\n\n\n\n\n\nss\n\n\n\u06f0\u06f0 \u06f0\u06f1 ... \u06f5\u06f8 \u06f5\u06f9\n\n\n\n\n\n\nUnix Timestamp\n\n\nX\n\n\n1360013296\n\n\n\n\n\n\nTimezone\n\n\nZ\n\n\n-\u06f0\u06f4:\u06f3\u06f0 -\u06f0\u06f5:\u06f0\u06f0 ... +\u06f0\u06f4:\u06f3\u06f0 +\u06f0\u06f5:\u06f0\u06f0\n\n\n\n\n\n\n\n\nZZ\n\n\n-\u06f0\u06f4\u06f3\u06f0 -\u06f0\u06f5:\u06f0\u06f0 ... +\u06f0\u06f4:\u06f3\u06f0 +\u06f0\u06f5:\u06f0\u06f0\n\n\n\n\n\n\n\n\nLong Date formats\n\n\n\n\n\n\n\n\nType\n\n\nTocken\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\nTime\n\n\nLT\n\n\n\"\u06f4:\u06f1\u06f5 \u0628 \u0638\"\n\n\n\n\n\n\nMonth numeral, day of month, year\n\n\nL\n\n\n\u06f1\u06f3\u06f9\u06f2/\u06f0\u06f2/\u06f2\u06f0\n\n\n\n\n\n\n\n\nl\n\n\n\u06f3\u06f9\u06f2/\u06f2/\u06f2\u06f0\n\n\n\n\n\n\nMonth name, day of month, year\n\n\nLL\n\n\n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f2\u06f0 \u06f1\u06f3\u06f9\u06f2\n\n\n\n\n\n\n\n\nll\n\n\n\u0627\u0631\u062f \u06f2\u06f0 \u06f1\u06f3\u06f9\u06f2\n\n\n\n\n\n\nMonth name, day of month, year, time\n\n\nLLL\n\n\n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f1\u06f3\u06f9\u06f2 \u06f2\u06f0 \u06f4:\u06f2\u06f3 \u0628 \u0638\n\n\n\n\n\n\n\n\nlll\n\n\n\u0627\u0631\u062f \u06f1\u06f3\u06f9\u06f2 \u06f2\u06f0 \u06f4:\u06f2\u06f3 \u0628 \u0638\n\n\n\n\n\n\nMonth name, day of month, day of week, year, time\n\n\nLLLL\n\n\n\u062c\u0645\u0639\u0647 \u06f2\u06f0 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f1\u06f3\u06f9\u06f2 \u06f4:\u06f2\u06f5 \u0628 \u0638\n\n\n\n\n\n\n\n\nllll\n\n\n\u062c \u06f2\u06f0 \u0627\u0631\u062f \u06f1\u06f3\u06f9\u06f2 \u06f4:\u06f2\u06f7 \u0628 \u0638\n\n\n\n\n\n\n\n\nDefault format\n\n\nISO8601 format \nYYYY-MM-DDTHH:mm:ssZ\n\n\"\u06f1\u06f3\u06f9\u06f1-\u06f1\u06f0-\u06f0\u06f4 \u06f1\u06f1:\u06f2\u06f7:\u06f5\u06f3 \u0642 \u0638\"\n\n\nFormat To Persian digit\n\n\n\n\nDeprecated as 1.0.* instead use \ntoLocale\n\n\n\n\nBy Default persianDate format, use Persian Number System, for engilsh number Set formatPersian Option as false\n\n\n\n\n\nvar\n \nd\n \n=\n \nnew\n \npersianDate\n([\n1391\n]);\n\n\nd\n.\nformat\n();\n \n//\n\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\n\n\nwindow\n.\nformatPersian\n \n=\n \nfalse\n;\n\n\nd\n.\nformat\n();\n \n//\n1391-01-01 00:00:00 AM\n\n\n\n\n\n\nAlso you can set golbal config like this\n\n\n\n\n\nwindow\n.\nformatPersian\n  \n=\n \nfalse\n;\n\n\n\n\n\n\n\n\nNote: After Set Global config you can set config for every instance\n\n\n\n\n\n\n\nvar\n \nd\n \n=\n \nnew\n \npersianDate\n([\n1391\n]);\n\n\nd\n.\nformat\n();\n \n//\n\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\n\n\nwindow\n.\nformatPersian\n \n=\n \nfalse\n;\n\n\nd\n.\nformat\n();\n \n//\n1391-01-01 00:00:00 AM\n\n\nd\n.\nformatPersian\n \n=\n \ntrue\n;\n\n\nd\n.\nformat\n();\n \n//\n\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\n\n\n\n\n\n\nDifference\n\n\nnew persianDate().diff(PersianDate|String|Boolean);\n\n\n\n\n\nAccept 3 argument, (ccmparable persianDate object, difference key, boolean value that make returned output float)\n\n\nTo get the difference in milliseconds, use \npersianDate#diff\n.\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1392\n,\n \n0\n,\n \n29\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1392\n,\n \n0\n,\n28\n]);\n\n\na\n.\ndiff\n(\nb\n)\n \n// 86400000\n\n\n\n\n\n\nTo get the difference in another unit of measurement, pass that measurement as the second argument.\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1392\n,\n \n0\n,\n29\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1392\n,\n0\n,\n28\n]);\n\n\na\n.\ndiff\n(\nb\n,\n \ndays\n);\n \n// 1\n\n\n\n\n\n\nThe supported measurements are years, months, weeks, days, hours, minutes, and seconds. For ease of development, the singular forms are supported .\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1391\n,\n \n0\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1392\n,\n \n5\n]);\n\n\na\n.\ndiff\n(\nb\n,\n \nyears\n);\n\n\na\n.\ndiff\n(\nb\n,\n \nyears\n,\n \ntrue\n);\n\n\n\n\n\n\nIf the persianDate is later than the persianDate you are passing to \npersianDate.fn.diff\n , the return value will be negative.\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n();\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n().\nadd\n(\nseconds\n,\n \n1\n);\n\n\na\n.\ndiff\n(\nb\n);\n \n// -1000\n\n\nb\n.\ndiff\n(\na\n);\n \n// 1000\n\n\n\n\n\n\nA easy way to think of this is by replacing \n.diff(\n with a minus operator.\n\n\n\n\n\na\n.\ndiff\n(\nb\n);\n\n\nb\n.\ndiff\n(\na\n);\n\n\n\n\n\n\nUnix Offset (milliseconds)\n\n\nnew\n \npersianDate\n().\nvalueOf\n();\n\n\n\n\n\n\npersianDate#valueOf\n simply outputs the number of milliseconds since the Unix Epoch, just like \nDate#valueOf\n .\n\n\nnew\n \npersianDate\n(\n1318874398806\n).\nvalueOf\n();\n \n// 1318874398806\n\n\nnew\n \npersianDate\n(\n1318874398806\n).\nformat\n();\n \n// \n\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f5 \u06f2\u06f1:\u06f2\u06f9:\u06f5\u06f8 \u0628 \u0638\n\n\n\n\n\n\nTo get a Unix timestamp (the number of seconds since the epoch) from a \npersianDate\n , use \npersianDate#unix\n .\n\n\nUnix Timestamp (seconds)\n\n\nnew\n \npersianDate\n().\nunix\n();\n\n\n\n\n\n\npersianDate#unix\n outputs a Unix timestamp (the of seconds since the Unix Epoch).\n\n\nnew\n \npersianDate\n(\n1318874398806\n).\nunix\n();\n \n// 1318874398\n\n\n\n\n\n\nThis value is floored to the nearest second, and does not include a milliseconds component.\n\n\nTimezone Offset\n\n\nnew\n \npersianDate\n().\nzone\n();\n\n\n\n\n\n\nGet the timezone offset in minutes.\n\n\nnew\n \npersianDate\n().\nzone\n();\n \n// (60, 120, 240, -270, etc.)\n\n\n\n\n\n\nDays in Month\n\n\nnew\n \npersianDate\n().\ndaysInMonth\n();\n\n\n\n\n\n\nGet the number of days in the current month.\n\n\nnew\n \npersianDate\n([\n1392\n,\n1\n]).\ndaysInMonth\n();\n \n// 31\n\n\nnew\n \npersianDate\n([\n1392\n,\n8\n]).\ndaysInMonth\n();\n \n// 30\n\n\nnew\n \npersianDate\n([\n1392\n,\n12\n]).\ndaysInMonth\n();\n \n// 29\n\n\nnew\n \npersianDate\n([\n1391\n,\n12\n]).\ndaysInMonth\n();\n \n// 30\n\n\n\n\n\n\nAs Javascript Date\n\n\nnew\n \npersianDate\n().\ntoDate\n();\n\n\n\n\n\n\nTo get the native \nDate\n object that \npersianDate.js\n wraps, use \npersianDate#toDate\n .\n\n\nThis will return the \nDate\n that the \npersianDate\n uses.\n\n\nAs Array\n\n\nnew\n \npersianDate\n().\ntoArray\n();\n\n\n\n\n\n\nThis returns an array that mirrors the parameters from new \npersianDate()\n .\n\n\nnew\n \npersianDate\n().\ntoArray\n();\n \n// [1391, 1, 4, 14, 40, 16, 154];\n\n\n\n\n\n\nRange Name\n\n\nHelper method that return date range name like week days name, month names, month days names (specially in persian calendar).\n\n\npersianDate\n.\ntoLocale\n(\nfa\n).\ntoCalendar\n(\npersian\n);\n\n\n\npersianDate\n.\nrangeName\n().\nweekdays\n;\n\n\n// [\n\u0634\u0646\u0628\u0647\n, \n\u06cc\u06a9\u0634\u0646\u0628\u0647\n, \n\u062f\u0648\u0634\u0646\u0628\u0647\n, \n\u0633\u0647 \u0634\u0646\u0628\u0647\n, \n\u0686\u0647\u0627\u0631 \u0634\u0646\u0628\u0647\n, \n\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647\n, \n\u062c\u0645\u0639\u0647\n]\n\n\n\npersianDate\n.\nrangeName\n().\nweekdaysMin\n;\n\n\n// [\n\u0634\n, \n\u06cc\n, \n\u062f\n, \n\u0633\n, \n\u0686\n, \n\u067e\n, \n\u062c\n]\n\n\n\npersianDate\n.\nrangeName\n().\nmonths\n;\n\n\n// [\n\u0641\u0631\u0648\u0631\u062f\u06cc\u0646\n, \n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a\n, \n\u062e\u0631\u062f\u0627\u062f\n, \n\u062a\u06cc\u0631\n, \n\u0645\u0631\u062f\u0627\u062f\n, \n\u0634\u0647\u0631\u06cc\u0648\u0631\n, \n\u0645\u0647\u0631\n, \n\u0622\u0628\u0627\u0646\n, \n\u0622\u0630\u0631\n, \n\u062f\u06cc\n, \n\u0628\u0647\u0645\u0646\n, \n\u0627\u0633\u0641\u0646\u062f\n]\n\n\n\npersianDate\n.\nrangeName\n().\nmonthsShort\n;\n \n\n// [\n\u0641\u0631\u0648\n, \n\u0627\u0631\u062f\n, \n\u062e\u0631\u062f\n, \n\u062a\u06cc\u0631\n, \n\u0645\u0631\u062f\n, \n\u0634\u0647\u0631\n, \n\u0645\u0647\u0631\n, \n\u0622\u0628\u0627\n, \n\u0622\u0630\u0631\n, \n\u062f\u06cc\n, \n\u0628\u0647\u0645\n, \n\u0627\u0633\u0641\n]\n\n\n\npersianDate\n.\nrangeName\n().\npersianDaysName\n[\n0\n];\n \n\n// \n\u0627\u0648\u0631\u0645\u0632\u062f\n\n\n\n\n\n\n\n\nPersian month day name wiki\n\n\n\n\nAlso You can get Gregorian calendar range names\n\n\npersianDate\n.\ntoCalendar\n(\ngregorian\n).\nrangeName\n().\nmonths\n;\n\n\n// [\n\u0698\u0627\u0646\u0648\u06cc\u0647\n, \n\u0641\u0648\u0631\u06cc\u0647\n, \n\u0645\u0627\u0631\u0633\n, \n\u0622\u0648\u0631\u06cc\u0644\n, \n\u0645\u0647\n, \n\u0698\u0648\u0626\u0646\n, \n\u0698\u0648\u0626\u06cc\u0647\n, \n\u0627\u0648\u062a\n, \n\u0633\u067e\u062a\u0627\u0645\u0628\u0631\n, \n\u0627\u06a9\u062a\u0628\u0631\n, \n\u0646\u0648\u0627\u0645\u0628\u0631\n, \n\u062f\u0633\u0627\u0645\u0628\u0631\n]\n\n\n\npersianDate\n.\ntoCalendar\n(\ngregorian\n).\ntoLocale\n(\nen\n).\nrangeName\n().\nmonths\n;\n\n\n// [\nJanuary\n, \nFebruary\n, \nMarch\n, \nApril\n, \nMay\n, \nJune\n, \nJuly\n, \nAugust\n, \nSeptember\n, \nOctober\n, \nNovember\n, \nDecember\n]\n\n\n\n\npersianDate\n.\ntoCalendar\n(\ngregorian\n).\ntoLocale\n(\nen\n).\nrangeName\n().\nweekDayes\n;\n\n\n// [\nSunday\n, \nMonday\n, \nTuesday\n, \nWednesday\n, \nThursday\n, \nFriday\n, \nSaturday\n]\n\n\n\npersianDate\n.\ntoCalendar\n(\ngregorian\n).\ntoLocale\n(\nen\n).\nrangeName\n().\nweekDayesShort\n;\n\n\n// [\nSun\n, \nMon\n, \nTue\n, \nWed\n, \nThu\n, \nFri\n, \nSat\n]\n\n\n\npersianDate\n.\ntoCalendar\n(\ngregorian\n).\ntoLocale\n(\nen\n).\nrangeName\n().\nweekDayesMin\n;\n\n\n// [\nSu\n, \nMo\n, \nTu\n, \nWe\n, \nTh\n, \nFr\n, \nSa\n]\n\n\n\n\n\n\nQuery\n\n\nIs Leap Year\n\n\nnew\n \npersianDate\n().\nisLeapYear\n();\n\n\n\n\n\n\npersianDate#isLeapYear\n returns true if that year is a leap year, and \nfalse\n if it is not. base on object calendarType.\n\n\nnew\n \npersianDate\n([\n1391\n]).\nisLeapYear\n();\n \n// true\n\n\nnew\n \npersianDate\n([\n1392\n]).\nisLeapYear\n();\n \n// false\n\n\nnew\n \npersianDate\n([\n1393\n]).\nisLeapYear\n();\n \n// false\n\n\nnew\n \npersianDate\n([\n1394\n]).\nisLeapYear\n();\n \n// false\n\n\nnew\n \npersianDate\n([\n1395\n]).\nisLeapYear\n();\n \n// true\n\n\nnew\n \npersianDate\n([\n1396\n]).\nisLeapYear\n();\n \n// false\n\n\n\n\n\n\nIs Daylight Saving Time\n\n\nnew\n \npersianDate\n().\nisDST\n();\n\n\n\n\n\n\npersianDate#isDST\n checks if the current persianDate is in daylight savings time.\n\n\nnew\n \npersianDate\n([\n1396\n,\n \n1\n,\n \n1\n]).\nisDST\n();\n \n// false\n\n\nnew\n \npersianDate\n([\n1396\n,\n \n1\n,\n \n2\n]).\nisDST\n();\n \n// true\n\n\nnew\n \npersianDate\n([\n1396\n,\n \n6\n,\n \n30\n]).\nisDST\n();\n \n// true\n\n\nnew\n \npersianDate\n([\n1396\n,\n \n6\n,\n \n31\n]).\nisDST\n();\n \n// false\n\n\n\n\n\n\n\n\nBased on \nPersian DST wiki\n\n\n\n\nIs a PersianDat\n\n\nvar\n \nobj\n \n=\n \nnew\n \npersianDate\n();\n\n\n\n// options 1\n\n\nnew\n \npersianDate\n().\nisPersianDate\n(\nobj\n);\n \n// true\n\n\n\n//option 2\n\n\npersianDate\n.\nisPersianDate\n(\nobj\n);\n\n\n\n\n\n\nTo check if a variable is a persianDate object, use \npersianDate().isPersianDate()\n .\n\n\nnew\n \npersianDate\n().\nisPersianDate\n();\n \n// false\n\n\nnew\n \npersianDate\n().\nisPersianDate\n(\nnew\n \nDate\n());\n \n// false\n\n\nnew\n \npersianDate\n().\nisPersianDate\n(\nnew\n \npersianDate\n());\n \n// true\n\n\n\n\n\n\nIs Same Month\n\n\nCheck date object with given date object month similarity\n\n\n// options 1\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n1\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n12\n]);\n\n\nb\n.\nisSameMonth\n(\na\n);\n \n// true\n\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n1\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1397\n,\n1\n,\n12\n]);\n\n\nb\n.\nisSameMonth\n(\na\n);\n \n// false\n\n\n\n// options 2\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n1\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n12\n]);\n\n\npersianDate\n.\nisSameMonth\n(\na\n,\nb\n);\n \n// true\n\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n1\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1397\n,\n1\n,\n12\n]);\n\n\npersianDate\n.\nisSameMonth\n(\na\n,\nb\n);\n \n// false\n\n\n\n\n\n\nIs Same Day\n\n\nCheck date object with given date object day similarity\n\n\n// options 1\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n1\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n1\n]);\n\n\nb\n.\nisSameDay\n(\na\n);\n \n// true\n\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n1\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n2\n,\n1\n]);\n\n\nb\n.\nisSameDay\n(\na\n);\n \n// false\n\n\n\n// options 2\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n12\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n12\n]);\n\n\npersianDate\n.\nisSameDay\n(\na\n,\nb\n);\n \n// true\n\n\n\nvar\n \na\n \n=\n \nnew\n \npersianDate\n([\n1396\n,\n1\n,\n12\n]);\n\n\nvar\n \nb\n \n=\n \nnew\n \npersianDate\n([\n1397\n,\n1\n,\n12\n]);\n\n\npersianDate\n.\nisSameDay\n(\na\n,\nb\n);\n \n// false\n\n\n\n\n\n\nlicense\n\n\nWTFPL", 
            "title": "Document"
        }, 
        {
            "location": "/persian-date/#persian-date", 
            "text": "Javascript date library for parsing, validating, manipulating, and formatting Persian dates System.   from 1.0.0 persian date support gregorian calendar.   Inspired by  momentjs  More info at  wikipedia      Star  Issue  Fork", 
            "title": "Persian Date"
        }, 
        {
            "location": "/persian-date/#install", 
            "text": "npm install persian-date --save-dev\nbower install persian-date --save-dev", 
            "title": "Install"
        }, 
        {
            "location": "/persian-date/#browser", 
            "text": "script   src = node_modules/persian-date/dist/persian-date.js   type = text/javascript / script  script   type = text/javascript \n     new   persianDate (). format ();   //  \u06f1\u06f3\u06f9\u06f6-\u06f0\u06f1-\u06f1\u06f1 \u06f2\u06f3:\u06f3\u06f3:\u06f2\u06f7 \u0628 \u0638  (when i run in my console)    / script", 
            "title": "Browser"
        }, 
        {
            "location": "/persian-date/#webpack", 
            "text": "require( persian-date );", 
            "title": "Webpack"
        }, 
        {
            "location": "/persian-date/#calendar-and-locale", 
            "text": "", 
            "title": "Calendar and locale"
        }, 
        {
            "location": "/persian-date/#tocalendar", 
            "text": "default:  persian  available option:  persian   gregorian  from version 1.0.*  persianDate  have an option that allows developers to set calendar type of Date object.  you can change calendar type globally or only in specific object  if you want change calendar type globally:  persianDate . toCalendar ( gregorian );  new   persianDate ([ 2017 ]). year ();   // 2017  new   persianDate ([ 2017 ]). format ( MMM );   //  \u0698\u0627\u0646\u0648\u06cc\u0647   or only on instance:  new   persianDate ([ 1396 ]). toCalendar ( gregorian ). year ();   // 2017", 
            "title": "toCalendar"
        }, 
        {
            "location": "/persian-date/#toleapyearmode", 
            "text": "default:  algorithmic  available option:  algorithmic ,  astronomical  There is two popular way to determining leap years for the Persian calendar.     astronomical: occur whenever that number of days elapsed between equinoxes at the reference meridian.    algorithmic: based on Behrooz-Birashk proposed algorithm.    After version 1.0.*  persianDate  support both algorithms and you can choose which algorithm use in your project. \ncurrently, we have support 2 type of leap year mode  algorithmic ,  astronomical .  you can change it globally like this example  persianDate . toLeapYearMode ( algorithmic )   or change it in you instance  new   persianDate (). toLeapYearMode ( algorithmic )    toLeapYearMode  only work when calendar type is  persian , and doesnt any effect on  gregorian  calendar", 
            "title": "toLeapYearMode"
        }, 
        {
            "location": "/persian-date/#tolocale", 
            "text": "default:  fa  available option:  fa   en  if you want change locale globally:  persianDate . toLocale ( fa );  new   persianDate ([ 1396 , 6 , 17 ]). format ();   //  \u06f1\u06f3\u06f9\u06f6-\u06f0\u06f6-\u06f1\u06f7 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638  new   persianDate ([ 1396 , 6 , 17 ]). format ( dddd );   //  \u062c\u0645\u0639\u0647  new   persianDate ([ 1396 , 6 , 17 ]). format ( MMMM );   //  \u0634\u0647\u0631\u06cc\u0648\u0631  persianDate . toLocale ( en );  new   persianDate ([ 1396 , 6 , 17 ]). format ();   //  1396-06-17 00:00:00 AM  new   persianDate ([ 1396 , 6 , 17 ]). format ( dddd );   //  Friday  new   persianDate ([ 1396 , 6 , 17 ]). format ( MMMM );   //  Shahrivar   or only on instance:  new   persianDate ([ 1396 , 6 , 17 ]). toLocale ( fa ). format ();   //  \u06f1\u06f3\u06f9\u06f6-\u06f0\u06f6-\u06f1\u06f7 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638  new   persianDate ([ 1396 , 6 , 17 ]). toLocale ( fa ). format ( dddd );   //  \u062c\u0645\u0639\u0647  new   persianDate ([ 1396 , 6 , 17 ]). toLocale ( fa ). format ( MMMM );   //  \u0634\u0647\u0631\u06cc\u0648\u0631  persianDate . toCalendar ( gregorian );  new   persianDate ([ 1396 , 6 , 17 ]). toLocale ( en ). format ();   //  1397-07-07 00:00:00 AM  new   persianDate ([ 1396 , 6 , 17 ]). toLocale ( en ). format ( dddd );   //  Friday  new   persianDate ([ 1396 , 6 , 17 ]). toLocale ( en ). format ( MMMM );   //  June    after version 1.0.*, you must use  toLocale  instead  formatPersian , for show persian or english digit.", 
            "title": "toLocale"
        }, 
        {
            "location": "/persian-date/#parse", 
            "text": "Instead of modifying the native  Date.prototype  , persianDate creates a wrapper for the Date object.\nTo get this wrapper object, simply call  persianDate()  with one of the supported input types.", 
            "title": "Parse"
        }, 
        {
            "location": "/persian-date/#now", 
            "text": "new   persianDate ();   To get the current date and time, just call  persianDate()  with no parameters.  var   now   =   new   persianDate ();   This is essentially the same as calling  new persianDate(new Date())  .", 
            "title": "Now"
        }, 
        {
            "location": "/persian-date/#unix-offset-milliseconds", 
            "text": "new   persianDate ( /* Number */ );   Similar to  new Date(Number) , you can create a persianDate by passing an integer value representing the number of milliseconds since the Unix Epoch (Jan 1 1970 12AM UTC).  var   day   =   new   persianDate ( 1318781876406 );   //  \u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f1\u06f9:\u06f4\u06f7:\u06f5\u06f6 \u0628 \u0638", 
            "title": "Unix Offset (milliseconds)"
        }, 
        {
            "location": "/persian-date/#unix-timestamp-seconds", 
            "text": "persianDate . unix ( /* Number */ );   To create a persianDate from a Unix timestamp (seconds since the Unix Epoch), use  persianDate.unix(Number)  var   day   =   new   persianDate . unix ( 1318781876 );   //  \u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f1\u06f9:\u06f4\u06f7:\u06f5\u06f6 \u0628 \u0638   This is implemented as  persianDate(timestamp * 1000)  , so partial seconds in the input timestamp are included.", 
            "title": "Unix Timestamp (seconds)"
        }, 
        {
            "location": "/persian-date/#date", 
            "text": "new   persianDate ( new   Date ());   You can create a  persianDate  with a pre-existing native Javascript  Date  object.   var   day   =   new   Date ( 2011 ,   9 ,   16 );  var   dayWrapper   =   new   persianDate ( day );   //  \u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638   This is the fastest way to get a persianDate.js wrapper.", 
            "title": "Date"
        }, 
        {
            "location": "/persian-date/#array", 
            "text": "['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond']   new   persianDate ([ 1391 ,   12 ,   29 ,   12 ,   25 ,   25 ,   900 ]);   You can create a persianDate with an array of numbers that mirror the parameters passed to new  Date()  But As Persian Date Number Like [1393,2,22,11,22,30]  new   persianDate ([ 1393 ,   1 ,   14 ,   15 , 25 ,   50 , 125 ]);   //  \u06f1\u06f3\u06f9\u06f3-\u06f0\u06f1-\u06f1\u06f4 \u06f1\u06f5:\u06f2\u06f5:\u06f5\u06f0 \u0628 \u0638   Any value past the year is optional, and will default to the lowest possible number.  new   persianDate ([ 1392 ]);   // Farvardin 1st  new   persianDate ([ 1392 ,   6 ]);   // Shahrivar 1st  new   persianDate ([ 1392 ,   6 ,   10 ]);   // Shahrivar 10th    Note: from 1.0.* you can pass gregorian date array to create gregorian date object. for this functionality you must change date object calendar type by  toCalendar('gregorian')   example:  persianDate . toCalendar ( gregorian );  new   persianDate ([ 2017 , 2 , 2 ]). format ();   //  \u06f2\u06f0\u06f1\u06f7-\u06f0\u06f2-\u06f0\u06f2 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638", 
            "title": "Array"
        }, 
        {
            "location": "/persian-date/#aspnet-json-date", 
            "text": "new persianDate(String);  ASP.NET returns dates in JSON as  /Date(1198908717056)/  or  /Date(1198908717056-0700)/  If a string that matches this format is passed in, it will be parsed correctly.  new   persianDate ( /Date(1198908717056-0700)/ );   // \u06f1\u06f3\u06f8\u06f6-\u06f1\u06f0-\u06f0\u06f8 \u06f0\u06f9:\u06f4\u06f1:\u06f5\u06f7 \u0642 \u0638", 
            "title": "ASP.NET JSON Date"
        }, 
        {
            "location": "/persian-date/#pesiandate-clone", 
            "text": "new persianDate(persianDate);  All persianDate are mutable. If you want a clone of a persianDate, you can do so explicitly or implicitly.\nCalling  persianDate()  on a persianDate will clone it.   var   a   =   new   persianDate ([ 1392 ]);  var   b   =   new   persianDate ( a );  a . year ( 1300 );  b . year ();   // 1392    var   a   =   new   persianDate ([ 1392 ]);  var   b   =   a . clone ();  a . year ( 1300 );  b . year ();   // 1392", 
            "title": "PesianDate Clone"
        }, 
        {
            "location": "/persian-date/#get-set", 
            "text": "persainDate.js uses overloaded getters and setters. You may be familiar with this pattern from it's use in jQuery.  Calling these methods without parameters acts as a getter, and calling them with a parameter acts as a setter.  These map to the corresponding function on the native  Date  object.  new   persianDate (). seconds ( 30 ). valueOf ()   ===   new   Date (). setSeconds ( 30 );   // true  new   persianDate (). seconds ()   ===   new   Date (). getSeconds ();   // true", 
            "title": "Get + Set"
        }, 
        {
            "location": "/persian-date/#millisecond", 
            "text": "new   persianDate (). millisecond ( 100 );  new   persianDate (). millisecond ();   // 100  new   persianDate (). milliseconds ( 100 );  new   persianDate (). milliseconds ();   // 100   Gets or sets the milliseconds.  Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the seconds.", 
            "title": "Millisecond"
        }, 
        {
            "location": "/persian-date/#second", 
            "text": "new   persianDate (). second ( 10 );  new   persianDate (). second ();   // 10  new   persianDate (). seconds ( 10 );  new   persianDate (). seconds ();   // 10   Gets or sets the seconds.  Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the minutes.", 
            "title": "Second"
        }, 
        {
            "location": "/persian-date/#minute", 
            "text": "new   persianDate (). minute ( 20 );  new   persianDate (). minute ();   // 20  new   persianDate (). minutes ( 20 );  new   persianDate (). minutes ();   // 20   Gets or sets the minutes.  Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the hours.", 
            "title": "Minute"
        }, 
        {
            "location": "/persian-date/#hour", 
            "text": "new   persianDate (). hour ( 12 );  new   persianDate (). hour ();   // 12  new   persianDate (). hours ( 12 );  new   persianDate (). hours ();   // 12   Gets or sets the hour.  Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the day.", 
            "title": "Hour"
        }, 
        {
            "location": "/persian-date/#date-of-month", 
            "text": "new   persianDate (). date ( 23 );  new   persianDate (). date ();   // 23  new   persianDate (). dates ( 23 );  new   persianDate (). dates ();   // 23   Gets or sets the day of the month.  Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the months.   Note: persianDate#date is for the date of the month, and persianDate#day is for the day of the week.", 
            "title": "Date of Month"
        }, 
        {
            "location": "/persian-date/#year", 
            "text": "new   persianDate (). year ( 1390 );  new   persianDate (). year ();   // 1390  new   persianDate (). years ( 1390 );  new   persianDate (). years ();   // 1390   Gets or sets the year.  Accepts numbers from -270,000 to 270,000.", 
            "title": "Year"
        }, 
        {
            "location": "/persian-date/#day-of-week", 
            "text": "new   persianDate (). day ();   // Number  new   persianDate (). days ();   // Number   Gets the day of the week.   Note:  persianDate#date  is for the date of the month, and  persianDate#day  is for the day of the week.", 
            "title": "Day of Week"
        }, 
        {
            "location": "/persian-date/#manipulate", 
            "text": "Once you have a PersianDate , you may want to manipulate it in some way. There are a number of methods to help with this.  persianDate.js uses the  fluent interface pattern ,\n also known as  method chaining . This allows you to do crazy things like the following.  new   persianDate (). add ( days ,   7 ). subtract ( months ,   1 ). year ( 2009 ). hours ( 0 ). minutes ( 0 ). seconds ( 0 );    Note: It should be noted that persianDates are mutable. Calling any of the manipulation methods will change the original persianDate.   If you want to create a copy and manipulate it, you should use  persianDate#clone  before manipulating the persianDate.", 
            "title": "Manipulate"
        }, 
        {
            "location": "/persian-date/#add", 
            "text": "new   persianDate (). add ( String ,   Number );   Mutates the original persianDate by adding time.  This is a pretty robust function for adding time to an existing persianDate. To add time, pass the key of what time you want to add, and the amount you want to add.  new   persianDate (). add ( days ,   7 );   There are some shorthand keys as well if you're into that whole brevity thing.  new   persianDate (). add ( d ,   7 );      Key  Alternate  Shorthand      years  year  y    months  month  M    weeks  week  w    days  day  d    hours  hour  h    minutes  minute  m    seconds  second  s    milliseconds  millisecond  ms     If you want to add multiple different keys at the same time, you can pass them in as an object literal.  new   persianDate (). add ( days ,   7 ). add ( months ,   1 );   // with chaining   There are no upper limits for the amounts, so you can overload any of the parameters.  new   persianDate (). add ( milliseconds ,   1000000 );   // a million milliseconds  new   persianDate (). add ( days ,   360 );   // 360 days", 
            "title": "Add"
        }, 
        {
            "location": "/persian-date/#subtract", 
            "text": "new   persianDate (). subtract ( String ,   Number );   Mutates the original persianDate by subtracting time.  This is exactly the same as  persianDate#add  , only instead of adding time, it subtracts time.  new   persianDate (). subtract ( days ,   7 );", 
            "title": "Subtract"
        }, 
        {
            "location": "/persian-date/#start-of-time", 
            "text": "new   persianDate (). startOf ( String );   Mutates the original persianDate by setting it to the start of a unit of time.  new   persianDate (). startOf ( year );     // set to Farvardin 1st, 12:00 am this year  new   persianDate (). startOf ( month );    // set to the first of this month, 12:00 am  new   persianDate (). startOf ( week );     // set to the first day of this week, 12:00 am  new   persianDate (). startOf ( day );      // set to 12:00 am today  new   persianDate (). startOf ( hour );     // set to now, but with 0 mins, 0 secs, and 0 ms  new   persianDate (). startOf ( minute );   // set to now, but with 0 seconds and 0 milliseconds  new   persianDate (). startOf ( second );   // same as persianDate().milliseconds(0);   These shortcuts are essentially the same as the following.  new   persianDate (). startOf ( year );  new   persianDate (). month ( 1 ). date ( 1 ). hours ( 0 ). minutes ( 0 ). seconds ( 0 ). milliseconds ( 0 );   new   persianDate (). startOf ( hour );  new   persianDate (). minutes ( 0 ). seconds ( 0 ). milliseconds ( 0 )", 
            "title": "Start of Time"
        }, 
        {
            "location": "/persian-date/#end-of-time", 
            "text": "new   persianDate (). endOf ( String );   Mutates the original persianDate by setting it to the end of a unit of time.  This is the same as  persianDate#startOf  , only instead of setting to the start of a unit of time, it sets to the end of a unit of time.  new   persianDate (). endOf ( year );   // set the persianDate to 12-31 11:59:59.999 pm this year", 
            "title": "End of Time"
        }, 
        {
            "location": "/persian-date/#display", 
            "text": "Once parsing and manipulation are done, you need some way to display the persianDate.", 
            "title": "Display"
        }, 
        {
            "location": "/persian-date/#format", 
            "text": "new   persianDate (). format ();  new   persianDate (). format ( string );   This is the most robust display option. It takes a string of tokens and replaces them with their corresponding values.  new   persianDate (). format ( dddd, MMMM DD YYYY, h:mm:ss a );   //  \u0634\u0646\u0628\u0647, \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 \u06f1\u06f2 \u06f1\u06f3\u06f9\u06f6, \u06f5:\u06f5\u06f4:\u06f1\u06f1 \u0628 \u0638  new   persianDate (). format ( dddd, ha );   //  \u0634\u0646\u0628\u0647, \u06f5\u0628 \u0638   This is the most robust display option. It takes a string of tokens and replaces them with their corresponding values.     Type  Tocken  Output      Month  M  \u06f1 \u06f2 ... \u06f1\u06f1 \u06f1\u06f2     MM  \u06f0\u06f1 \u06f0\u06f2 ... \u06f1\u06f1 \u06f1\u06f2     MMM  \u0641\u0631\u0648 \u0627\u0631\u062f ... \u0627\u0633\u0641     MMMM  \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a ... \u0627\u0633\u0641\u0646\u062f    Day of month  D  \u06f1 \u06f2 ... \u06f3\u06f0 \u06f3\u06f1     DD  \u06f0\u06f1 \u06f0\u06f2 ... \u06f3\u06f0 \u06f3\u06f1    Day of year  DDD  \u06f1 \u06f2 ... \u06f3\u06f6\u06f4 \u06f3\u06f6\u06f5     d  \u06f0 \u06f1 ... \u06f5 \u06f6     dd  \u0634 \u06cc ... \u062c     ddd  \u0634\u0646\u0628\u0647 \u06cc\u06a9\u0634\u0646\u0628\u0647 ... \u062c\u0645\u0639\u0647     dddd  \u0627\u0646\u0627\u0631\u0627\u0645 \u0645\u0627\u0646\u062a\u0631\u0647 \u0633\u067e\u0646\u062f ... \u0627\u0634\u062a\u0627\u062f    Week of Year  w  \u06f1 \u06f2 ... \u06f5\u06f2 \u06f5\u06f3     ww  \u06f0\u06f1 \u06f0\u06f2 ... \u06f5\u06f2 \u06f5\u06f3    Year  YY  \u06f6\u06f6 \u06f9\u06f1 ... \u06f9\u06f8 \u06f3\u06f0     yyyy  \u06f1\u06f3\u06f6\u06f6 \u06f1\u06f3\u06f9\u06f1 ... \u06f1\u06f3\u06f9\u06f8 \u06f1\u06f4\u06f0\u06f1    AM/PM  a  \"\u0642 \u0638\", \"\u0628 \u0638\"    Hour  H  \u06f0 \u06f1 ... \u06f2\u06f2 \u06f2\u06f3     HH  \u06f0\u06f0 \u06f0\u06f1 ... \u06f2\u06f2 \u06f2\u06f3     h  \u06f1 \u06f2 ... \u06f1\u06f1 \u06f1\u06f2     hh  \u06f0\u06f1 \u06f0\u06f2 ... \u06f1\u06f1 \u06f1\u06f2    Minute  m  \u06f0 \u06f1 ... \u06f5\u06f8 \u06f5\u06f9     mm  \u06f0\u06f0 \u06f0\u06f1 ... \u06f5\u06f8 \u06f5\u06f9    Second  s  \u06f0 \u06f1 ... \u06f5\u06f8 \u06f5\u06f9     ss  \u06f0\u06f0 \u06f0\u06f1 ... \u06f5\u06f8 \u06f5\u06f9    Unix Timestamp  X  1360013296    Timezone  Z  -\u06f0\u06f4:\u06f3\u06f0 -\u06f0\u06f5:\u06f0\u06f0 ... +\u06f0\u06f4:\u06f3\u06f0 +\u06f0\u06f5:\u06f0\u06f0     ZZ  -\u06f0\u06f4\u06f3\u06f0 -\u06f0\u06f5:\u06f0\u06f0 ... +\u06f0\u06f4:\u06f3\u06f0 +\u06f0\u06f5:\u06f0\u06f0", 
            "title": "Format"
        }, 
        {
            "location": "/persian-date/#long-date-formats", 
            "text": "Type  Tocken  Output      Time  LT  \"\u06f4:\u06f1\u06f5 \u0628 \u0638\"    Month numeral, day of month, year  L  \u06f1\u06f3\u06f9\u06f2/\u06f0\u06f2/\u06f2\u06f0     l  \u06f3\u06f9\u06f2/\u06f2/\u06f2\u06f0    Month name, day of month, year  LL  \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f2\u06f0 \u06f1\u06f3\u06f9\u06f2     ll  \u0627\u0631\u062f \u06f2\u06f0 \u06f1\u06f3\u06f9\u06f2    Month name, day of month, year, time  LLL  \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f1\u06f3\u06f9\u06f2 \u06f2\u06f0 \u06f4:\u06f2\u06f3 \u0628 \u0638     lll  \u0627\u0631\u062f \u06f1\u06f3\u06f9\u06f2 \u06f2\u06f0 \u06f4:\u06f2\u06f3 \u0628 \u0638    Month name, day of month, day of week, year, time  LLLL  \u062c\u0645\u0639\u0647 \u06f2\u06f0 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f1\u06f3\u06f9\u06f2 \u06f4:\u06f2\u06f5 \u0628 \u0638     llll  \u062c \u06f2\u06f0 \u0627\u0631\u062f \u06f1\u06f3\u06f9\u06f2 \u06f4:\u06f2\u06f7 \u0628 \u0638", 
            "title": "Long Date formats"
        }, 
        {
            "location": "/persian-date/#default-format", 
            "text": "ISO8601 format  YYYY-MM-DDTHH:mm:ssZ \n\"\u06f1\u06f3\u06f9\u06f1-\u06f1\u06f0-\u06f0\u06f4 \u06f1\u06f1:\u06f2\u06f7:\u06f5\u06f3 \u0642 \u0638\"", 
            "title": "Default format"
        }, 
        {
            "location": "/persian-date/#format-to-persian-digit", 
            "text": "Deprecated as 1.0.* instead use  toLocale   By Default persianDate format, use Persian Number System, for engilsh number Set formatPersian Option as false   var   d   =   new   persianDate ([ 1391 ]);  d . format ();   // \u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638  window . formatPersian   =   false ;  d . format ();   // 1391-01-01 00:00:00 AM   Also you can set golbal config like this   window . formatPersian    =   false ;    Note: After Set Global config you can set config for every instance    var   d   =   new   persianDate ([ 1391 ]);  d . format ();   // \u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638  window . formatPersian   =   false ;  d . format ();   // 1391-01-01 00:00:00 AM  d . formatPersian   =   true ;  d . format ();   // \u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638", 
            "title": "Format To Persian digit"
        }, 
        {
            "location": "/persian-date/#difference", 
            "text": "new persianDate().diff(PersianDate|String|Boolean);  Accept 3 argument, (ccmparable persianDate object, difference key, boolean value that make returned output float)  To get the difference in milliseconds, use  persianDate#diff .  var   a   =   new   persianDate ([ 1392 ,   0 ,   29 ]);  var   b   =   new   persianDate ([ 1392 ,   0 , 28 ]);  a . diff ( b )   // 86400000   To get the difference in another unit of measurement, pass that measurement as the second argument.  var   a   =   new   persianDate ([ 1392 ,   0 , 29 ]);  var   b   =   new   persianDate ([ 1392 , 0 , 28 ]);  a . diff ( b ,   days );   // 1   The supported measurements are years, months, weeks, days, hours, minutes, and seconds. For ease of development, the singular forms are supported .  var   a   =   new   persianDate ([ 1391 ,   0 ]);  var   b   =   new   persianDate ([ 1392 ,   5 ]);  a . diff ( b ,   years );  a . diff ( b ,   years ,   true );   If the persianDate is later than the persianDate you are passing to  persianDate.fn.diff  , the return value will be negative.  var   a   =   new   persianDate ();  var   b   =   new   persianDate (). add ( seconds ,   1 );  a . diff ( b );   // -1000  b . diff ( a );   // 1000   A easy way to think of this is by replacing  .diff(  with a minus operator.   a . diff ( b );  b . diff ( a );", 
            "title": "Difference"
        }, 
        {
            "location": "/persian-date/#unix-offset-milliseconds_1", 
            "text": "new   persianDate (). valueOf ();   persianDate#valueOf  simply outputs the number of milliseconds since the Unix Epoch, just like  Date#valueOf  .  new   persianDate ( 1318874398806 ). valueOf ();   // 1318874398806  new   persianDate ( 1318874398806 ). format ();   //  \u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f5 \u06f2\u06f1:\u06f2\u06f9:\u06f5\u06f8 \u0628 \u0638   To get a Unix timestamp (the number of seconds since the epoch) from a  persianDate  , use  persianDate#unix  .", 
            "title": "Unix Offset (milliseconds)"
        }, 
        {
            "location": "/persian-date/#unix-timestamp-seconds_1", 
            "text": "new   persianDate (). unix ();   persianDate#unix  outputs a Unix timestamp (the of seconds since the Unix Epoch).  new   persianDate ( 1318874398806 ). unix ();   // 1318874398   This value is floored to the nearest second, and does not include a milliseconds component.", 
            "title": "Unix Timestamp (seconds)"
        }, 
        {
            "location": "/persian-date/#timezone-offset", 
            "text": "new   persianDate (). zone ();   Get the timezone offset in minutes.  new   persianDate (). zone ();   // (60, 120, 240, -270, etc.)", 
            "title": "Timezone Offset"
        }, 
        {
            "location": "/persian-date/#days-in-month", 
            "text": "new   persianDate (). daysInMonth ();   Get the number of days in the current month.  new   persianDate ([ 1392 , 1 ]). daysInMonth ();   // 31  new   persianDate ([ 1392 , 8 ]). daysInMonth ();   // 30  new   persianDate ([ 1392 , 12 ]). daysInMonth ();   // 29  new   persianDate ([ 1391 , 12 ]). daysInMonth ();   // 30", 
            "title": "Days in Month"
        }, 
        {
            "location": "/persian-date/#as-javascript-date", 
            "text": "new   persianDate (). toDate ();   To get the native  Date  object that  persianDate.js  wraps, use  persianDate#toDate  .  This will return the  Date  that the  persianDate  uses.", 
            "title": "As Javascript Date"
        }, 
        {
            "location": "/persian-date/#as-array", 
            "text": "new   persianDate (). toArray ();   This returns an array that mirrors the parameters from new  persianDate()  .  new   persianDate (). toArray ();   // [1391, 1, 4, 14, 40, 16, 154];", 
            "title": "As Array"
        }, 
        {
            "location": "/persian-date/#range-name", 
            "text": "Helper method that return date range name like week days name, month names, month days names (specially in persian calendar).  persianDate . toLocale ( fa ). toCalendar ( persian );  persianDate . rangeName (). weekdays ;  // [ \u0634\u0646\u0628\u0647 ,  \u06cc\u06a9\u0634\u0646\u0628\u0647 ,  \u062f\u0648\u0634\u0646\u0628\u0647 ,  \u0633\u0647 \u0634\u0646\u0628\u0647 ,  \u0686\u0647\u0627\u0631 \u0634\u0646\u0628\u0647 ,  \u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647 ,  \u062c\u0645\u0639\u0647 ]  persianDate . rangeName (). weekdaysMin ;  // [ \u0634 ,  \u06cc ,  \u062f ,  \u0633 ,  \u0686 ,  \u067e ,  \u062c ]  persianDate . rangeName (). months ;  // [ \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 ,  \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a ,  \u062e\u0631\u062f\u0627\u062f ,  \u062a\u06cc\u0631 ,  \u0645\u0631\u062f\u0627\u062f ,  \u0634\u0647\u0631\u06cc\u0648\u0631 ,  \u0645\u0647\u0631 ,  \u0622\u0628\u0627\u0646 ,  \u0622\u0630\u0631 ,  \u062f\u06cc ,  \u0628\u0647\u0645\u0646 ,  \u0627\u0633\u0641\u0646\u062f ]  persianDate . rangeName (). monthsShort ;   // [ \u0641\u0631\u0648 ,  \u0627\u0631\u062f ,  \u062e\u0631\u062f ,  \u062a\u06cc\u0631 ,  \u0645\u0631\u062f ,  \u0634\u0647\u0631 ,  \u0645\u0647\u0631 ,  \u0622\u0628\u0627 ,  \u0622\u0630\u0631 ,  \u062f\u06cc ,  \u0628\u0647\u0645 ,  \u0627\u0633\u0641 ]  persianDate . rangeName (). persianDaysName [ 0 ];   //  \u0627\u0648\u0631\u0645\u0632\u062f    Persian month day name wiki   Also You can get Gregorian calendar range names  persianDate . toCalendar ( gregorian ). rangeName (). months ;  // [ \u0698\u0627\u0646\u0648\u06cc\u0647 ,  \u0641\u0648\u0631\u06cc\u0647 ,  \u0645\u0627\u0631\u0633 ,  \u0622\u0648\u0631\u06cc\u0644 ,  \u0645\u0647 ,  \u0698\u0648\u0626\u0646 ,  \u0698\u0648\u0626\u06cc\u0647 ,  \u0627\u0648\u062a ,  \u0633\u067e\u062a\u0627\u0645\u0628\u0631 ,  \u0627\u06a9\u062a\u0628\u0631 ,  \u0646\u0648\u0627\u0645\u0628\u0631 ,  \u062f\u0633\u0627\u0645\u0628\u0631 ]  persianDate . toCalendar ( gregorian ). toLocale ( en ). rangeName (). months ;  // [ January ,  February ,  March ,  April ,  May ,  June ,  July ,  August ,  September ,  October ,  November ,  December ]  persianDate . toCalendar ( gregorian ). toLocale ( en ). rangeName (). weekDayes ;  // [ Sunday ,  Monday ,  Tuesday ,  Wednesday ,  Thursday ,  Friday ,  Saturday ]  persianDate . toCalendar ( gregorian ). toLocale ( en ). rangeName (). weekDayesShort ;  // [ Sun ,  Mon ,  Tue ,  Wed ,  Thu ,  Fri ,  Sat ]  persianDate . toCalendar ( gregorian ). toLocale ( en ). rangeName (). weekDayesMin ;  // [ Su ,  Mo ,  Tu ,  We ,  Th ,  Fr ,  Sa ]", 
            "title": "Range Name"
        }, 
        {
            "location": "/persian-date/#query", 
            "text": "", 
            "title": "Query"
        }, 
        {
            "location": "/persian-date/#is-leap-year", 
            "text": "new   persianDate (). isLeapYear ();   persianDate#isLeapYear  returns true if that year is a leap year, and  false  if it is not. base on object calendarType.  new   persianDate ([ 1391 ]). isLeapYear ();   // true  new   persianDate ([ 1392 ]). isLeapYear ();   // false  new   persianDate ([ 1393 ]). isLeapYear ();   // false  new   persianDate ([ 1394 ]). isLeapYear ();   // false  new   persianDate ([ 1395 ]). isLeapYear ();   // true  new   persianDate ([ 1396 ]). isLeapYear ();   // false", 
            "title": "Is Leap Year"
        }, 
        {
            "location": "/persian-date/#is-daylight-saving-time", 
            "text": "new   persianDate (). isDST ();   persianDate#isDST  checks if the current persianDate is in daylight savings time.  new   persianDate ([ 1396 ,   1 ,   1 ]). isDST ();   // false  new   persianDate ([ 1396 ,   1 ,   2 ]). isDST ();   // true  new   persianDate ([ 1396 ,   6 ,   30 ]). isDST ();   // true  new   persianDate ([ 1396 ,   6 ,   31 ]). isDST ();   // false    Based on  Persian DST wiki", 
            "title": "Is Daylight Saving Time"
        }, 
        {
            "location": "/persian-date/#is-a-persiandat", 
            "text": "var   obj   =   new   persianDate ();  // options 1  new   persianDate (). isPersianDate ( obj );   // true  //option 2  persianDate . isPersianDate ( obj );   To check if a variable is a persianDate object, use  persianDate().isPersianDate()  .  new   persianDate (). isPersianDate ();   // false  new   persianDate (). isPersianDate ( new   Date ());   // false  new   persianDate (). isPersianDate ( new   persianDate ());   // true", 
            "title": "Is a PersianDat"
        }, 
        {
            "location": "/persian-date/#is-same-month", 
            "text": "Check date object with given date object month similarity  // options 1  var   a   =   new   persianDate ([ 1396 , 1 , 1 ]);  var   b   =   new   persianDate ([ 1396 , 1 , 12 ]);  b . isSameMonth ( a );   // true  var   a   =   new   persianDate ([ 1396 , 1 , 1 ]);  var   b   =   new   persianDate ([ 1397 , 1 , 12 ]);  b . isSameMonth ( a );   // false  // options 2  var   a   =   new   persianDate ([ 1396 , 1 , 1 ]);  var   b   =   new   persianDate ([ 1396 , 1 , 12 ]);  persianDate . isSameMonth ( a , b );   // true  var   a   =   new   persianDate ([ 1396 , 1 , 1 ]);  var   b   =   new   persianDate ([ 1397 , 1 , 12 ]);  persianDate . isSameMonth ( a , b );   // false", 
            "title": "Is Same Month"
        }, 
        {
            "location": "/persian-date/#is-same-day", 
            "text": "Check date object with given date object day similarity  // options 1  var   a   =   new   persianDate ([ 1396 , 1 , 1 ]);  var   b   =   new   persianDate ([ 1396 , 1 , 1 ]);  b . isSameDay ( a );   // true  var   a   =   new   persianDate ([ 1396 , 1 , 1 ]);  var   b   =   new   persianDate ([ 1396 , 2 , 1 ]);  b . isSameDay ( a );   // false  // options 2  var   a   =   new   persianDate ([ 1396 , 1 , 12 ]);  var   b   =   new   persianDate ([ 1396 , 1 , 12 ]);  persianDate . isSameDay ( a , b );   // true  var   a   =   new   persianDate ([ 1396 , 1 , 12 ]);  var   b   =   new   persianDate ([ 1397 , 1 , 12 ]);  persianDate . isSameDay ( a , b );   // false", 
            "title": "Is Same Day"
        }, 
        {
            "location": "/persian-date/#license", 
            "text": "WTFPL", 
            "title": "license"
        }, 
        {
            "location": "/persian-date/changelog/", 
            "text": "Persian Date Change Log\n\n\nAll notable changes to this project will be documented in this file.\n\n\nThe format is based on \nKeep a Changelog\n \nand this project adheres to \nSemantic Versioning\n.\n\n\n[1.1.0] - 2019-07-07\n\n\n\n\nFix \n52\n\n\nFix \n53\n\n\nFix \n56\n\n\nFix \n71\n\n\nFix \n49\n\n\nSupport zero and negative values in input array\n\n\nValidate array input, Prevent ngative value for month/date/hour/minute/seconds   \n\n\nFix state manager naming \"ON\" to \"State\"\n\n\nFix startOf week bug\n\n\nFix add/subtract week issue\n\n\n\n\n[1.0.5] - 2018-2-11\n\n\n\n\nFix \n35\n\n\n\n\n[1.0.4] - 2018-1-27\n\n\n\n\nFix \n43\n\n\nFix \n44\n\n\n\n\n[1.0.3] - 2017-12-24\n\n\n\n\nFix \n183\n\n\nFix \n41\n\n\n\n\n[1.0.1] - 2017-10-1\n\n\n\n\nFix npm published package\n\n\n\n\n[1.0.0] - 2017-10-1\n\n\n\n\nRefactor algorithms\n\n\nSupport gregorian calendar type\n\n\nSupport two persian leap year calculation mode\n\n\nAdd toCalendar, toLocale, toLeapYearMode options\n\n\nFix isDST method\n\n\nFix add subtract issue with bubbled days\n\n\nAdd rangeName, isSameDay, isSameMonth\n\n\nWrite more test\n\n\n\n\n[0.2.5]\n\n\n\n\nFix \n#37\n\n\n\n\n[0.2.4]\n\n\n\n\nMerge bit-foundation-typings .d.ts\n\n\n\n\n[0.2.2]\n\n\n\n\nFix bower \n\n\n\n\n[0.2.1]\n\n\n\n\nSome dev env fix before release \n\n\n\n\n[0.2.0]\n\n\n\n\nRefactor all code to es6\n\n\nHello webpack ,babel, mocha, istanbul, coveralls, travis, sync-pg\n\n\nAdd millisecond as last item of date array [1396, 12, 23, 40, 40, 40, 200]\n\n\nWrite mocha test\n\n\nChange licence to WTFPL\n\n\n\n\n[0.1.8]\n\n\n\n\nFix some issue\n\n\nAdd document\n\n\n\n\n[0.1.7] - 2015-01-05\n\n\n\n\nFix Format Like Moment.js\n\n\nFix formatPersian Config\n\n\nFix Constructor Without New Keyword\n\n\nFix #daysInMonth\n\n\nAdd #toArray\n\n\nFix persianDate.unix(input)", 
            "title": "Change log"
        }, 
        {
            "location": "/persian-date/changelog/#persian-date-change-log", 
            "text": "All notable changes to this project will be documented in this file.  The format is based on  Keep a Changelog  \nand this project adheres to  Semantic Versioning .", 
            "title": "Persian Date Change Log"
        }, 
        {
            "location": "/persian-date/changelog/#110-2019-07-07", 
            "text": "Fix  52  Fix  53  Fix  56  Fix  71  Fix  49  Support zero and negative values in input array  Validate array input, Prevent ngative value for month/date/hour/minute/seconds     Fix state manager naming \"ON\" to \"State\"  Fix startOf week bug  Fix add/subtract week issue", 
            "title": "[1.1.0] - 2019-07-07"
        }, 
        {
            "location": "/persian-date/changelog/#105-2018-2-11", 
            "text": "Fix  35", 
            "title": "[1.0.5] - 2018-2-11"
        }, 
        {
            "location": "/persian-date/changelog/#104-2018-1-27", 
            "text": "Fix  43  Fix  44", 
            "title": "[1.0.4] - 2018-1-27"
        }, 
        {
            "location": "/persian-date/changelog/#103-2017-12-24", 
            "text": "Fix  183  Fix  41", 
            "title": "[1.0.3] - 2017-12-24"
        }, 
        {
            "location": "/persian-date/changelog/#101-2017-10-1", 
            "text": "Fix npm published package", 
            "title": "[1.0.1] - 2017-10-1"
        }, 
        {
            "location": "/persian-date/changelog/#100-2017-10-1", 
            "text": "Refactor algorithms  Support gregorian calendar type  Support two persian leap year calculation mode  Add toCalendar, toLocale, toLeapYearMode options  Fix isDST method  Fix add subtract issue with bubbled days  Add rangeName, isSameDay, isSameMonth  Write more test", 
            "title": "[1.0.0] - 2017-10-1"
        }, 
        {
            "location": "/persian-date/changelog/#025", 
            "text": "Fix  #37", 
            "title": "[0.2.5]"
        }, 
        {
            "location": "/persian-date/changelog/#024", 
            "text": "Merge bit-foundation-typings .d.ts", 
            "title": "[0.2.4]"
        }, 
        {
            "location": "/persian-date/changelog/#022", 
            "text": "Fix bower", 
            "title": "[0.2.2]"
        }, 
        {
            "location": "/persian-date/changelog/#021", 
            "text": "Some dev env fix before release", 
            "title": "[0.2.1]"
        }, 
        {
            "location": "/persian-date/changelog/#020", 
            "text": "Refactor all code to es6  Hello webpack ,babel, mocha, istanbul, coveralls, travis, sync-pg  Add millisecond as last item of date array [1396, 12, 23, 40, 40, 40, 200]  Write mocha test  Change licence to WTFPL", 
            "title": "[0.2.0]"
        }, 
        {
            "location": "/persian-date/changelog/#018", 
            "text": "Fix some issue  Add document", 
            "title": "[0.1.8]"
        }, 
        {
            "location": "/persian-date/changelog/#017-2015-01-05", 
            "text": "Fix Format Like Moment.js  Fix formatPersian Config  Fix Constructor Without New Keyword  Fix #daysInMonth  Add #toArray  Fix persianDate.unix(input)", 
            "title": "[0.1.7] - 2015-01-05"
        }, 
        {
            "location": "/persian-date/leapyear/", 
            "text": "Persian Date leap year calculation\n\n\nThere is two popular way to determining leap years for the Persian calendar. \nastronomical: occur whenever that number of days elapse between equinoxes at the reference meridian.\n\n\nalgorithmic: based on Ahmad Birashk proposed algorithm.\n\n\nAfter version 0.3.0 persianDate support both algorithm and you can choose which algorithm use in your project. \ncurrently we have support 3 type of calendar \nastronomical\n, \nalgorithmic\n.\n\n\nyou can change it globally like this example.\n\n\nTest leap years calculation algorithm\n\n\nI designed a test to understand the differences between these algorithms.\n\n\nCheck total leap years in next 3003 year after 1396, Difference test between Astronomical, Algorithmic and some other algorithms I found.\n\n\nyou can see this result by run mocha test.\n\n\nCheck total leap years in next 3003 year, Difference algorithm\n\n\n- Total gregorian leap year: \n728\n\n- Total Nasa algorithm leap year: \n727\n\n- Total Algorithmic leap year: \n727\n\n- Total Astronomical leap year: \n727\n\n- Total Behrooz_Birashk leap year: \n727\n\n- Total Wikipedia python code leap year: \n727\n\n\n- Total Common leap year \n(\npersianAstro, persianAlgo, NASA, Behrooz_Birashk, wiki python, gregorian\n)\n: \n118\n\n\n- Common leap year \n(\nAstronomical, NASA\n)\n: \n118\n\n- Common leap year \n(\nAlgorithmic, NASA\n)\n: \n727\n\n\n- Common leap year \n(\nAstronomical, Behrooz_Birashk\n)\n: \n133\n\n- Common leap year \n(\nAlgorithmic, Behrooz_Birashk\n)\n: \n691\n\n\n- Common leap year \n(\nAstronomical, wiki\n)\n: \n118\n\n- Common leap year \n(\nAlgorithmic, wiki\n)\n: \n711\n\n\n\n\n\n\nMore info:\n\n\nfourmilab\n \n| \n\nwikipedia\n\n|\n\nwikipedia Jalali_calendar\n\n|\n\nNASA sky calendar", 
            "title": "Leap year"
        }, 
        {
            "location": "/persian-date/leapyear/#persian-date-leap-year-calculation", 
            "text": "There is two popular way to determining leap years for the Persian calendar. \nastronomical: occur whenever that number of days elapse between equinoxes at the reference meridian.  algorithmic: based on Ahmad Birashk proposed algorithm.  After version 0.3.0 persianDate support both algorithm and you can choose which algorithm use in your project. \ncurrently we have support 3 type of calendar  astronomical ,  algorithmic .  you can change it globally like this example.", 
            "title": "Persian Date leap year calculation"
        }, 
        {
            "location": "/persian-date/leapyear/#test-leap-years-calculation-algorithm", 
            "text": "I designed a test to understand the differences between these algorithms.  Check total leap years in next 3003 year after 1396, Difference test between Astronomical, Algorithmic and some other algorithms I found.  you can see this result by run mocha test.", 
            "title": "Test leap years calculation algorithm"
        }, 
        {
            "location": "/persian-date/leapyear/#check-total-leap-years-in-next-3003-year-difference-algorithm", 
            "text": "- Total gregorian leap year:  728 \n- Total Nasa algorithm leap year:  727 \n- Total Algorithmic leap year:  727 \n- Total Astronomical leap year:  727 \n- Total Behrooz_Birashk leap year:  727 \n- Total Wikipedia python code leap year:  727 \n\n- Total Common leap year  ( persianAstro, persianAlgo, NASA, Behrooz_Birashk, wiki python, gregorian ) :  118 \n\n- Common leap year  ( Astronomical, NASA ) :  118 \n- Common leap year  ( Algorithmic, NASA ) :  727 \n\n- Common leap year  ( Astronomical, Behrooz_Birashk ) :  133 \n- Common leap year  ( Algorithmic, Behrooz_Birashk ) :  691 \n\n- Common leap year  ( Astronomical, wiki ) :  118 \n- Common leap year  ( Algorithmic, wiki ) :  711", 
            "title": "Check total leap years in next 3003 year, Difference algorithm"
        }, 
        {
            "location": "/persian-date/leapyear/#more-info", 
            "text": "fourmilab  \n|  wikipedia \n| wikipedia Jalali_calendar \n| NASA sky calendar", 
            "title": "More info:"
        }, 
        {
            "location": "/datepicker/", 
            "text": "Persian Date Picker\n\n\nThis Date picker work with Iranian calendar.\n\n\nJalali calendar datepicker, which depends on \npersianDate\n\n\nMore info at \nWikipedia\n\n\n\n\nNote: from v1.0.0 persianDatepicker support gregorian calendar\n\n\n\n\n\n\n\n\n\n\nStar\n\n\nIssue\n\n\nFork\n\n\n\n\nDocuments\n\n\nExample/Demo\n\n\nPlayground\n\n\n\n\nTable of content:\n\n\n\n\nDependency\n\n\nInstall\n\n\nUsage\n\n\nOptions\n\n\nSee Options Full Document\n\n\n\n\nCDN\n\n\n\n\npersian-date.js \nuncompressed\n | \nminified\n\n\npersian-datepicker.js \nuncompressed\n | \nminified\n\n\npersian-datepicker.css \nuncompressed\n | \nminified\n\n\n\n\nDependency\n\n\n\n\npersian date\n\n\njquery\n\n\n\n\n\n\npersian-datepicker 1.x.x need persian-date 1.x.x\n\n\n\n\nInstall\n\n\nnpm install persian-datepicker\n\nbower install persian-datepicker\n\n\n\n\n\nUsage\n\n\nhead\n\n  \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\ncss/persian.datepicker.css\n/\n\n  \nscript\n \nsrc\n=\njs/jquery.js\n/\nscript\n\n  \nscript\n \nsrc\n=\njs/persian.date.js\n/\nscript\n\n  \nscript\n \nsrc\n=\njs/persian.datepicker.js\n/\nscript\n\n\n/\nhead\n\n\n\nscript\n \ntype\n=\ntext/javascript\n\n  \n$\n(\ndocument\n).\nready\n(\nfunction\n()\n \n{\n\n    \n$\n(\n.example1\n).\npDatepicker\n();\n\n  \n});\n\n\n/\nscript\n\n\n\ninput\n \ntype\n=\ntext\n \nclass\n=\nexample1\n \n/\n\n\n\n\n\n\nOptions table\n\n\nOptions full document\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncalendarType\n\n\nstring\n\n\n'persian'\n\n\nSet default calendar mode of datepicker, available options: 'persian', 'gregorian'\n\n\n\n\n\n\ncalendar\n\n\nobject\n\n\n\n\nCalendar type and localization configuration\n\n\n\n\n\n\ncalendar.persian\n\n\nobject\n\n\n\n\nPersian calendar configuration\n\n\n\n\n\n\ncalendar.persian.locale\n\n\nstring\n\n\n'fa'\n\n\nSet locale of Persian calendar available options: 'fa', 'en'\n\n\n\n\n\n\ncalendar.persian.showHint\n\n\nboolean\n\n\nfalse\n\n\nIf set true, small date hint of this calendar will be shown on another calendar\n\n\n\n\n\n\ncalendar.persian.leapYearMode\n\n\nstring\n\n\nalgorithmic\n\n\nPersian calendar leap year calculation mode, available options: 'algorithmic', 'astronomical'\n\n\n\n\n\n\ncalendar.gregorian\n\n\nobject\n\n\n\n\nGregorian calendar configuration\n\n\n\n\n\n\ncalendar.gregorian.locale\n\n\nstring\n\n\n'en'\n\n\nset locale of Gregorian calendar available options: 'fa', 'en'\n\n\n\n\n\n\ncalendar.gregorian.showHint\n\n\nboolean\n\n\nfalse\n\n\nIf set true, small date hint of this calendar will be shown on another calendar\n\n\n\n\n\n\nresponsive\n\n\nboolean\n\n\ntrue\n\n\nIf set true make enable responsive view on mobile devices\n\n\n\n\n\n\ninitialValue\n\n\nboolean\n\n\ntrue\n\n\nIf set true datepicker init with input value date, use data-date property when you want set inline datepicker initial value\n\n\n\n\n\n\ninitialValueType\n\n\nstring\n\n\n'gregorian'\n\n\nInitial value calendar type, accept: 'persian', 'gregorian'\n\n\n\n\n\n\ninline\n\n\nboolean\n\n\nfalse\n\n\nIf set true datepicker render inline\n\n\n\n\n\n\npersianDigit (DEPRECATED from 1.0.0)\n\n\nboolean\n\n\ntrue\n\n\nIf set true all digit shows as persian digit\n\n\n\n\n\n\nviewMode\n\n\nstring\n\n\n'day'\n\n\nAccept 'day', 'month', 'year'\n\n\n\n\n\n\nformat\n\n\nstring\n\n\n'LLLL'\n\n\nThe date format, combination of d, dd, m, mm, yy, yyyy. \nformat document\n\n\n\n\n\n\nformatter\n\n\nfunction\n\n\nfunction(unixDate){return unixDate}\n\n\nMain Input value formatter function\n\n\n\n\n\n\naltField\n\n\nstring\n\n\nnull\n\n\nAn input element that is to be updated with the selected date from the datepicker. Use the altFormat option to change the format of the date within this field. Leave as blank for no alternate field. acceptable value: : '#elementId','.element-class'\n\n\n\n\n\n\naltFormat\n\n\nstring\n\n\n'unix'\n\n\nThe date format, combination of d, dd, m, mm, yy, yyyy. \nformat document\n\n\n\n\n\n\naltFieldFormatter\n\n\nfunction\n\n\nfunction(unixDate){return unixDate}\n\n\nFormat value of alt field input input\n\n\n\n\n\n\nminDate\n\n\nUnix Offset\n\n\nnull\n\n\nSet min date on datepicker, prevent user select date before given unix time\n\n\n\n\n\n\nmaxDate\n\n\nUnix Offset\n\n\nnull\n\n\nSet max date on datepicker, prevent user select date after given unix time\n\n\n\n\n\n\nnavigator\n\n\nobject\n\n\n\n\nNavigator config object\n\n\n\n\n\n\nnavigator.enabled\n\n\nboolean\n\n\ntrue\n\n\nMake navigator enable or disable\n\n\n\n\n\n\nnavigator.scroll\n\n\nobject\n\n\n\n\nNavigate by scroll configuration\n\n\n\n\n\n\nnavigator.scroll.enabled\n\n\nboolean\n\n\ntrue\n\n\nIf you want prevent to navigate with mouse-wheel event make this option false\n\n\n\n\n\n\nnavigator.text\n\n\nobject\n\n\n\n\nNavigator text config object\n\n\n\n\n\n\nnavigator.text.btnNextText\n\n\nstring\n\n\n'\n'\n\n\nText of next button\n\n\n\n\n\n\nnavigator.text.btnPrevText\n\n\nstring\n\n\n'\n'\n\n\nText of previews button\n\n\n\n\n\n\nnavigator.onNext\n\n\nevent\n\n\nfunction (navigator) {}\n\n\nCalled when navigator goes to next state\n\n\n\n\n\n\nnavigator.onPrev\n\n\nevent\n\n\nfunction (navigator) {}\n\n\nCalled when navigator goes to prev state\n\n\n\n\n\n\nnavigator.onSwitch\n\n\nevent\n\n\nfunction (state) {}\n\n\nCalled when navigator switch\n\n\n\n\n\n\ntoolbox\n\n\nobject\n\n\n\n\nToolbox object options.\n\n\n\n\n\n\ntoolbox.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable toolbox object\n\n\n\n\n\n\ntoolbox.text (DEPRECATED from 1.0.0)\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntoolbox.text.btnToday (DEPRECATED from 1.0.0)\n\n\nstring\n\n\n'\u0627\u0645\u0631\u0648\u0632'\n\n\nToday button text\n\n\n\n\n\n\ntoolbox.todayButton\n\n\nobject\n\n\n\n\nToolbox today button configuration\n\n\n\n\n\n\ntoolbox.todayButton.enabled\n\n\nboolean\n\n\nfalse\n\n\nMake toolbox today button enable or disable\n\n\n\n\n\n\ntoolbox.todayButton.text\n\n\nobject\n\n\n\n\nToday button text\n\n\n\n\n\n\ntoolbox.todayButton.text.fa\n\n\nstring\n\n\n'\u0627\u0645\u0631\u0648\u0632'\n\n\nShow when current calendar is Persian\n\n\n\n\n\n\ntoolbox.todayButton.text.en\n\n\nstring\n\n\n'Today'\n\n\nShow when current calendar is Gregorian\n\n\n\n\n\n\ntoolbox.todayButton.onToday\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when today button clicked\n\n\n\n\n\n\ntoolbox.submitButton\n\n\nobject\n\n\n\n\nToolbox today button configuration\n\n\n\n\n\n\ntoolbox.submitButton.enabled\n\n\nboolean\n\n\ntrue\n\n\nMake toolbox submit button enable or disable\n\n\n\n\n\n\ntoolbox.submitButton.text\n\n\nobject\n\n\n\n\nSubmit button text\n\n\n\n\n\n\ntoolbox.submitButton.text.fa\n\n\nstring\n\n\n'\u062a\u0627\u06cc\u06cc\u062f'\n\n\nShow when current calendar is Persian\n\n\n\n\n\n\ntoolbox.submitButton.text.en\n\n\nstring\n\n\n'submit'\n\n\nShow when current calendar is Gregorian\n\n\n\n\n\n\ntoolbox.submitButton.onSubmit\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when submit button clicked\n\n\n\n\n\n\ntoolbox.calendarSwitch\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntoolbox.calendarSwitch.enabled\n\n\nboolean\n\n\ntrue\n\n\nMake calendar switch enable or disable\n\n\n\n\n\n\ntoolbox.calendarSwitch.format\n\n\nstring\n\n\n'MMMM'\n\n\nCalendar switch text format string\n\n\n\n\n\n\ntoolbox.calendarSwitch.onSwitch\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when calendar switch clicked\n\n\n\n\n\n\ntoolbox.onToday (DEPRECATED from 0.6.0)\n\n\nevent\n\n\nfunction(toolbox){return unixDate}\n\n\nEvent called when today btn clicked\n\n\n\n\n\n\nonlyTimePicker (mode)\n\n\nboolean\n\n\nfalse\n\n\nIf true, all pickers hide and just show timepicker\n\n\n\n\n\n\nonlySelectOnDate\n\n\nboolean\n\n\ntrue\n\n\nIf true, date select just by click on day in month grid, and when user select month or year selected date doesnt change\n\n\n\n\n\n\ncheckDate\n\n\nfunction\n\n\nfunction (unix)  { return true; }\n\n\nValidate date access before render\n\n\n\n\n\n\ncheckMonth\n\n\nfunction\n\n\nfunction (month) { return true; }\n\n\nValidate month access before render\n\n\n\n\n\n\ncheckYear\n\n\nfunction\n\n\nfunction (year)  { return true; }\n\n\nValidate year access before render\n\n\n\n\n\n\ntimePicker\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.enabled\n\n\nboolean\n\n\nfalse\n\n\nMake timePicker enable or disable\n\n\n\n\n\n\ntimePicker.step\n\n\nint\n\n\n1\n\n\nThe amount that increases or decreases by pressing the button\n\n\n\n\n\n\ntimePicker.hour\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.hour.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable hour in timepPicker object\n\n\n\n\n\n\ntimePicker.hour.step\n\n\nint\n\n\nnull\n\n\nThe amount that increases or decreases hour, by pressing the button. overwrite by timepicker.step\n\n\n\n\n\n\ntimePicker.minute\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.minute.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable minute in timePicker object\n\n\n\n\n\n\ntimePicker.minute.step\n\n\nint\n\n\nnull\n\n\nThe amount that increases or decreases minute, by pressing the button. overwrite by timepicker.step\n\n\n\n\n\n\ntimePicker.second\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.second.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable second in timePicker object\n\n\n\n\n\n\ntimePicker.second.step\n\n\nint\n\n\nnull\n\n\nThe amount that increases or decreases second, by pressing the button. overwrite by timepicker.step\n\n\n\n\n\n\ntimePicker.meridian\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.meridian.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable meridian in timePicker object\n\n\n\n\n\n\ndayPicker\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ndayPicker.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable dayPicker object\n\n\n\n\n\n\ndayPicker.titleFormat\n\n\nstring\n\n\n'YYYY MMMM'\n\n\nDayPicker title format string\n\n\n\n\n\n\ndayPicker.titleFormatter\n\n\nfunction\n\n\nfunction (year, month) {}\n\n\nDayPicker title formatter function\n\n\n\n\n\n\ndayPicker.onSelect\n\n\nevent\n\n\nfunction (selectedDayUnix) {}\n\n\nCalled when date select by user\n\n\n\n\n\n\nmonthPicker\n\n\nobject\n\n\n\n\n\n\n\n\n\n\nmonthPicker.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable monthPicker object\n\n\n\n\n\n\nmonthPicker.titleFormat\n\n\nstring\n\n\n'YYYY'\n\n\nMonthPicker title format string\n\n\n\n\n\n\nmonthPicker.titleFormatter\n\n\nfunction\n\n\nfunction (unix) {}\n\n\nMonthPicker title formatter function\n\n\n\n\n\n\nmonthPicker.onSelect\n\n\nevent\n\n\nfunction (monthIndex) {}\n\n\nCalled when month select by user\n\n\n\n\n\n\nyearPicker\n\n\nobject\n\n\n\n\n\n\n\n\n\n\nyearPicker.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable yearPicker object\n\n\n\n\n\n\nyearPicker.titleFormat\n\n\nstring\n\n\n'YYYY'\n\n\nYearPicker title format string\n\n\n\n\n\n\nyearPicker.titleFormatter\n\n\nfunction\n\n\nfunction (year) {}\n\n\nYearPicker title formatter function\n\n\n\n\n\n\nyearPicker.onSelect\n\n\nevent\n\n\nfunction (year) {}\n\n\nCalled when year select by user\n\n\n\n\n\n\nonSelect\n\n\nevent\n\n\nfunction (unixDate) {}\n\n\nCalled when date Select by user.\n\n\n\n\n\n\nonSet\n\n\nevent\n\n\nfunction (unixDate) {}\n\n\nCalled when date Select by api.\n\n\n\n\n\n\nonShow\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when datePicker shown\n\n\n\n\n\n\nonHide\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when datePicker hidden\n\n\n\n\n\n\nonToggle\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when datePicker visibility toggle\n\n\n\n\n\n\nonDestroy\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when datePicker destroyed\n\n\n\n\n\n\nautoClose\n\n\nboolean\n\n\nfalse\n\n\nIf true datePicker close after select date\n\n\n\n\n\n\nposition\n\n\nstring\n\n\n'auto'\n\n\nPosition of datepicker element relative to input element, accept 'auto', [x,y]\n\n\n\n\n\n\nobserver\n\n\nboolean\n\n\nfalse\n\n\nIf true datepicker update self by user inputted date string, accept 'yyyy/mm/dd'\n\n\n\n\n\n\ninputDelay\n\n\nint\n\n\n800  (millisecond)\n\n\nTime for last user key-down event, accept millisecond\n\n\n\n\n\n\ntemplate\n\n\nstring\n\n\nnull\n\n\nBy default datepicker have a template string, and you can overwrite it simply by replace string in config.\n\n\n\n\n\n\n\n\nThanks and appreciation\n\n\nThanks to \nVahid Mardani\n for everything that I learned from him\n, \nBehrooz Bahrami\n for designing the logo.\n, \nBita Edalati\n for create amazing \nPlayground\n\n\nlicense\n\n\nFreely distributable under the terms of the \nWTFPL\n license.", 
            "title": "Getting Start"
        }, 
        {
            "location": "/datepicker/#persian-date-picker", 
            "text": "This Date picker work with Iranian calendar.  Jalali calendar datepicker, which depends on  persianDate  More info at  Wikipedia   Note: from v1.0.0 persianDatepicker support gregorian calendar      Star  Issue  Fork   Documents  Example/Demo  Playground", 
            "title": "Persian Date Picker"
        }, 
        {
            "location": "/datepicker/#table-of-content", 
            "text": "Dependency  Install  Usage  Options  See Options Full Document", 
            "title": "Table of content:"
        }, 
        {
            "location": "/datepicker/#cdn", 
            "text": "persian-date.js  uncompressed  |  minified  persian-datepicker.js  uncompressed  |  minified  persian-datepicker.css  uncompressed  |  minified", 
            "title": "CDN"
        }, 
        {
            "location": "/datepicker/#dependency", 
            "text": "persian date  jquery    persian-datepicker 1.x.x need persian-date 1.x.x", 
            "title": "Dependency"
        }, 
        {
            "location": "/datepicker/#install", 
            "text": "npm install persian-datepicker\n\nbower install persian-datepicker", 
            "title": "Install"
        }, 
        {
            "location": "/datepicker/#usage", 
            "text": "head \n   link   rel = stylesheet   href = css/persian.datepicker.css / \n   script   src = js/jquery.js / script \n   script   src = js/persian.date.js / script \n   script   src = js/persian.datepicker.js / script  / head  script   type = text/javascript \n   $ ( document ). ready ( function ()   { \n     $ ( .example1 ). pDatepicker (); \n   });  / script  input   type = text   class = example1   /", 
            "title": "Usage"
        }, 
        {
            "location": "/datepicker/#options-table", 
            "text": "Options full document     name  type  default  description      calendarType  string  'persian'  Set default calendar mode of datepicker, available options: 'persian', 'gregorian'    calendar  object   Calendar type and localization configuration    calendar.persian  object   Persian calendar configuration    calendar.persian.locale  string  'fa'  Set locale of Persian calendar available options: 'fa', 'en'    calendar.persian.showHint  boolean  false  If set true, small date hint of this calendar will be shown on another calendar    calendar.persian.leapYearMode  string  algorithmic  Persian calendar leap year calculation mode, available options: 'algorithmic', 'astronomical'    calendar.gregorian  object   Gregorian calendar configuration    calendar.gregorian.locale  string  'en'  set locale of Gregorian calendar available options: 'fa', 'en'    calendar.gregorian.showHint  boolean  false  If set true, small date hint of this calendar will be shown on another calendar    responsive  boolean  true  If set true make enable responsive view on mobile devices    initialValue  boolean  true  If set true datepicker init with input value date, use data-date property when you want set inline datepicker initial value    initialValueType  string  'gregorian'  Initial value calendar type, accept: 'persian', 'gregorian'    inline  boolean  false  If set true datepicker render inline    persianDigit (DEPRECATED from 1.0.0)  boolean  true  If set true all digit shows as persian digit    viewMode  string  'day'  Accept 'day', 'month', 'year'    format  string  'LLLL'  The date format, combination of d, dd, m, mm, yy, yyyy.  format document    formatter  function  function(unixDate){return unixDate}  Main Input value formatter function    altField  string  null  An input element that is to be updated with the selected date from the datepicker. Use the altFormat option to change the format of the date within this field. Leave as blank for no alternate field. acceptable value: : '#elementId','.element-class'    altFormat  string  'unix'  The date format, combination of d, dd, m, mm, yy, yyyy.  format document    altFieldFormatter  function  function(unixDate){return unixDate}  Format value of alt field input input    minDate  Unix Offset  null  Set min date on datepicker, prevent user select date before given unix time    maxDate  Unix Offset  null  Set max date on datepicker, prevent user select date after given unix time    navigator  object   Navigator config object    navigator.enabled  boolean  true  Make navigator enable or disable    navigator.scroll  object   Navigate by scroll configuration    navigator.scroll.enabled  boolean  true  If you want prevent to navigate with mouse-wheel event make this option false    navigator.text  object   Navigator text config object    navigator.text.btnNextText  string  ' '  Text of next button    navigator.text.btnPrevText  string  ' '  Text of previews button    navigator.onNext  event  function (navigator) {}  Called when navigator goes to next state    navigator.onPrev  event  function (navigator) {}  Called when navigator goes to prev state    navigator.onSwitch  event  function (state) {}  Called when navigator switch    toolbox  object   Toolbox object options.    toolbox.enabled  boolean  true  Enable/Disable toolbox object    toolbox.text (DEPRECATED from 1.0.0)  object      toolbox.text.btnToday (DEPRECATED from 1.0.0)  string  '\u0627\u0645\u0631\u0648\u0632'  Today button text    toolbox.todayButton  object   Toolbox today button configuration    toolbox.todayButton.enabled  boolean  false  Make toolbox today button enable or disable    toolbox.todayButton.text  object   Today button text    toolbox.todayButton.text.fa  string  '\u0627\u0645\u0631\u0648\u0632'  Show when current calendar is Persian    toolbox.todayButton.text.en  string  'Today'  Show when current calendar is Gregorian    toolbox.todayButton.onToday  event  function () {}  Called when today button clicked    toolbox.submitButton  object   Toolbox today button configuration    toolbox.submitButton.enabled  boolean  true  Make toolbox submit button enable or disable    toolbox.submitButton.text  object   Submit button text    toolbox.submitButton.text.fa  string  '\u062a\u0627\u06cc\u06cc\u062f'  Show when current calendar is Persian    toolbox.submitButton.text.en  string  'submit'  Show when current calendar is Gregorian    toolbox.submitButton.onSubmit  event  function () {}  Called when submit button clicked    toolbox.calendarSwitch  object      toolbox.calendarSwitch.enabled  boolean  true  Make calendar switch enable or disable    toolbox.calendarSwitch.format  string  'MMMM'  Calendar switch text format string    toolbox.calendarSwitch.onSwitch  event  function () {}  Called when calendar switch clicked    toolbox.onToday (DEPRECATED from 0.6.0)  event  function(toolbox){return unixDate}  Event called when today btn clicked    onlyTimePicker (mode)  boolean  false  If true, all pickers hide and just show timepicker    onlySelectOnDate  boolean  true  If true, date select just by click on day in month grid, and when user select month or year selected date doesnt change    checkDate  function  function (unix)  { return true; }  Validate date access before render    checkMonth  function  function (month) { return true; }  Validate month access before render    checkYear  function  function (year)  { return true; }  Validate year access before render    timePicker  object      timePicker.enabled  boolean  false  Make timePicker enable or disable    timePicker.step  int  1  The amount that increases or decreases by pressing the button    timePicker.hour  object      timePicker.hour.enabled  boolean  true  Enable/Disable hour in timepPicker object    timePicker.hour.step  int  null  The amount that increases or decreases hour, by pressing the button. overwrite by timepicker.step    timePicker.minute  object      timePicker.minute.enabled  boolean  true  Enable/Disable minute in timePicker object    timePicker.minute.step  int  null  The amount that increases or decreases minute, by pressing the button. overwrite by timepicker.step    timePicker.second  object      timePicker.second.enabled  boolean  true  Enable/Disable second in timePicker object    timePicker.second.step  int  null  The amount that increases or decreases second, by pressing the button. overwrite by timepicker.step    timePicker.meridian  object      timePicker.meridian.enabled  boolean  true  Enable/Disable meridian in timePicker object    dayPicker  object      dayPicker.enabled  boolean  true  Enable/Disable dayPicker object    dayPicker.titleFormat  string  'YYYY MMMM'  DayPicker title format string    dayPicker.titleFormatter  function  function (year, month) {}  DayPicker title formatter function    dayPicker.onSelect  event  function (selectedDayUnix) {}  Called when date select by user    monthPicker  object      monthPicker.enabled  boolean  true  Enable/Disable monthPicker object    monthPicker.titleFormat  string  'YYYY'  MonthPicker title format string    monthPicker.titleFormatter  function  function (unix) {}  MonthPicker title formatter function    monthPicker.onSelect  event  function (monthIndex) {}  Called when month select by user    yearPicker  object      yearPicker.enabled  boolean  true  Enable/Disable yearPicker object    yearPicker.titleFormat  string  'YYYY'  YearPicker title format string    yearPicker.titleFormatter  function  function (year) {}  YearPicker title formatter function    yearPicker.onSelect  event  function (year) {}  Called when year select by user    onSelect  event  function (unixDate) {}  Called when date Select by user.    onSet  event  function (unixDate) {}  Called when date Select by api.    onShow  event  function () {}  Called when datePicker shown    onHide  event  function () {}  Called when datePicker hidden    onToggle  event  function () {}  Called when datePicker visibility toggle    onDestroy  event  function () {}  Called when datePicker destroyed    autoClose  boolean  false  If true datePicker close after select date    position  string  'auto'  Position of datepicker element relative to input element, accept 'auto', [x,y]    observer  boolean  false  If true datepicker update self by user inputted date string, accept 'yyyy/mm/dd'    inputDelay  int  800  (millisecond)  Time for last user key-down event, accept millisecond    template  string  null  By default datepicker have a template string, and you can overwrite it simply by replace string in config.", 
            "title": "Options table"
        }, 
        {
            "location": "/datepicker/#thanks-and-appreciation", 
            "text": "Thanks to  Vahid Mardani  for everything that I learned from him\n,  Behrooz Bahrami  for designing the logo.\n,  Bita Edalati  for create amazing  Playground", 
            "title": "Thanks and appreciation"
        }, 
        {
            "location": "/datepicker/#license", 
            "text": "Freely distributable under the terms of the  WTFPL  license.", 
            "title": "license"
        }, 
        {
            "location": "/datepicker/example/", 
            "text": "Example\n\n\nnormal example\n\n\n$\n(\n.normal-example\n).\npersianDatepicker\n();\n\n\n\n\n\n\ninput\n \nclass\n=\nnormal-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\nwithout initialValue\n\n\n$\n(\n.initial-value-example\n).\npersianDatepicker\n({\n\n    \ninitialValue\n:\n \nfalse\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\ninitial-value-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\ninitialValueType\n\n\n$\n(\n.initial-value-type-example\n).\npersianDatepicker\n({\n\n    \ninitialValueType\n:\n \npersian\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\ninitial-value-type-example\n \nvalue\n=\n1396-10-12\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\n$\n(\n.initial-value-type-gregorian-example\n).\npersianDatepicker\n({\n\n    \ninitialValueType\n:\n \ngregorian\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\ninitial-value-type-gregorian-example\n \nvalue\n=\n2017-1-1\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\ninline\n\n\n$\n(\n.inline-example\n).\npersianDatepicker\n({\n\n    \ninline\n:\n \ntrue\n,\n\n    \naltField\n:\n \n#inlineExampleAlt\n,\n\n    \naltFormat\n:\n \nLLLL\n,\n\n    \ntoolbox\n:\n{\n\n        \ncalendarSwitch\n:\n{\n\n            \nenabled\n:\n \ntrue\n\n        \n}\n\n    \n},\n\n    \nnavigator\n:\n{\n\n        \nscroll\n:\n{\n\n            \nenabled\n:\n \nfalse\n\n        \n}\n\n    \n},\n\n    \nmaxDate\n:\n \nnew\n \npersianDate\n().\nadd\n(\nmonth\n,\n \n3\n).\nvalueOf\n(),\n\n    \nminDate\n:\n \nnew\n \npersianDate\n().\nsubtract\n(\nmonth\n,\n \n3\n).\nvalueOf\n(),\n\n    \ntimePicker\n:\n \n{\n\n        \nenabled\n:\n \ntrue\n,\n\n        \nmeridiem\n:\n \n{\n\n            \nenabled\n:\n \ntrue\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n```html\n\ninput id=\ninlineExampleAlt\n class=\ndatepicker-demo\n /\n\n\ndiv class=\ninline-example\n \n/div\n\n\n\n\n\n\n\n\nDatepicker\n\n\n\n\n\n\n\n\n\nGregorian Calendar\n\n\n$\n(\n.gregorian-example\n).\npersianDatepicker\n({\n\n    \ninline\n:\n \ntrue\n,\n\n    \naltField\n:\n \n#gregorianExampleAlt\n,\n\n    \naltFormat\n:\n \nLLLL\n,\n\n    \ncalendarType\n:\n \ngregorian\n,\n\n    \ntoolbox\n:\n{\n\n        \ncalendarSwitch\n:\n{\n\n            \nenabled\n:\n \ntrue\n\n        \n}\n\n    \n},\n\n    \nnavigator\n:\n{\n\n        \nscroll\n:\n{\n\n            \nenabled\n:\n \nfalse\n\n        \n}\n\n    \n},\n\n    \nmaxDate\n:\n \nnew\n \npersianDate\n().\nadd\n(\nmonth\n,\n \n3\n).\nvalueOf\n(),\n\n    \nminDate\n:\n \nnew\n \npersianDate\n().\nsubtract\n(\nmonth\n,\n \n3\n).\nvalueOf\n(),\n\n    \ntimePicker\n:\n \n{\n\n        \nenabled\n:\n \ntrue\n,\n\n        \nmeridiem\n:\n \n{\n\n            \nenabled\n:\n \ntrue\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\ninput\n \nid\n=\ngregorianExampleAlt\n \nclass\n=\ndatepicker-demo\n \n/\n\n\ndiv\n \nclass\n=\ngregorian-example\n \n/\ndiv\n\n\n\n\n\n\n\n\nDatepicker\n\n\n\n\n\n\n\n\n\nChange Leap Year Mode\n\n\n$\n(\n.leapyear-algorithmic\n).\npersianDatepicker\n({\n\n    \ninline\n:\n \ntrue\n,\n\n\n\n});\n\n\n\n$\n(\n.leapyear-astronomical\n).\npersianDatepicker\n({\n\n    \ninline\n:\n \ntrue\n,\n\n    \ncalendar\n:\n{\n\n        \npersian\n:\n \n{\n\n            \nleapYearMode\n:\n \nastronomical\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\ndiv\n \nclass\n=\nleapyear-algorithmic\n \ndata-date\n=\n2025/3/12\n \n/\ndiv\n\n\ndiv\n \nclass\n=\nleapyear-astronomical\n \ndata-date\n=\n2025/3/12\n \n/\ndiv\n\n\n\n\n\n\n\n\n\n\nalgorithmic\n\n\n\n\n\n\n\n\nastronomical\n\n\n\n\n\n\n\n\n\nlocale\n\n\n$\n(\n.locale-fa\n).\npersianDatepicker\n({\n\n    \ninline\n:\n \ntrue\n,\n\n\n\n});\n\n\n\n$\n(\n.locale-en\n).\npersianDatepicker\n({\n\n    \ninline\n:\n \ntrue\n,\n\n    \ncalendar\n:\n{\n\n        \npersian\n:\n \n{\n\n            \nlocale\n:\n \nen\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\ndiv\n \nclass\n=\nlocale-fa\n \n/\ndiv\n\n\ndiv\n \nclass\n=\nlocale-en\n \n/\ndiv\n\n\n\n\n\n\n\n\n\n\nfa\n\n\n\n\n\n\n\n\nen\n\n\n\n\n\n\n\n\n\nObserver\n\n\ntrue, make user able to edit date by keyboard\n\n\n$\n(\n.observer-example\n).\npersianDatepicker\n({\n\n    \nobserver\n:\n \ntrue\n,\n\n    \nformat\n:\n \nYYYY/MM/DD\n,\n\n    \naltField\n:\n \n.observer-example-alt\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nobserver-example\n \n/\n\n\n\n\n\n\nAlt field\n\n\n\n\nDatepicker\n\n\n\n\nformat\n\n\nMore options in \nPersian Date Documents\n\n\n$\n(\n.format-example\n).\npersianDatepicker\n({\n\n    \nformat\n:\n \nLLLL\n \n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nformat-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\nformatter\n\n\n$\n(\n.formatter-example\n).\npersianDatepicker\n({\n\n    \nformatter\n:\n \nfunction\n(\nunix\n){\n\n        \nreturn\n \nselected unix: \n \n+\n \nunix\n;\n \n    \n}\n \n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nformatter-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\naltField\n\n\n$\n(\n.alt-field-example\n).\npersianDatepicker\n({\n\n    \naltField\n:\n \n.alt-field-example-alt-field\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nalt-field-example\n \n/\n\n\n\n\n\n\nAlt field\n\n\n\n\nDatepicker\n\n\n\n\nviewMode\n\n\n$\n(\n.view-mode-example\n).\npersianDatepicker\n({\n\n    \nviewMode\n:\n \nyear\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nview-mode-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\nminDate\n\n\n$\n(\n.min-date-example\n).\npersianDatepicker\n({\n\n    \nminDate\n:\n \nnew\n \npersianDate\n().\nunix\n()\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nmin-date-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\nmaxDate\n\n\n$\n(\n.max-date-example\n).\npersianDatepicker\n({\n\n    \nmaxDate\n:\n \nnew\n \npersianDate\n().\nunix\n()\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nmax-date-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\ncheckDate\n\n\n$\n(\n.check-date-example\n).\npersianDatepicker\n({\n\n    \ncheckDate\n:\n \nfunction\n(\nunix\n){\n\n        \nreturn\n \nnew\n \npersianDate\n(\nunix\n).\nday\n()\n \n!=\n \n4\n;\n\n    \n}\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\ncheck-date-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\ncheckMonth\n\n\n$\n(\n.check-month-example\n).\npersianDatepicker\n({\n\n    \ncheckMonth\n:\n \nfunction\n(\nmonth\n){\n\n        \nreturn\n \nmonth\n \n \n6\n;\n\n    \n}\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\ncheck-month-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\ncheckYear\n\n\n$\n(\n.check-year-example\n).\npersianDatepicker\n({\n\n    \ncheckYear\n:\n \nfunction\n(\nyear\n){\n\n        \nreturn\n \nyear\n \n=\n \n1391\n;\n\n    \n}\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\ncheck-year-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\nonlyTimePicker\n\n\n$\n(\n.only-timepicker-example\n).\npersianDatepicker\n({\n\n    \nonlyTimePicker\n:\n \ntrue\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nonly-timepicker-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\nautoClose\n\n\n$\n(\n.auto-close-example\n).\npersianDatepicker\n({\n\n    \nautoClose\n:\n \ntrue\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\nauto-close-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\nonSelect\n\n\n$\n(\n.on-select-example\n).\npersianDatepicker\n({\n\n    \nonSelect\n:\n \nfunction\n(\nunix\n){\n\n        \nconsole\n.\nlog\n(\ndatepicker select : \n \n+\n \nunix\n);\n\n    \n}\n\n\n});\n\n\n\n\n\n\ninput\n \nclass\n=\non-select-example\n \n/\n\n\n\n\n\n\nDatepicker\n\n\n\n\nRange selector\n\n\nRange Selector that make sure 'to' date is after 'from' date and also 'from' is before 'to' date.\n\n\nvar\n \nto\n,\n \nfrom\n;\n\n\nto\n \n=\n \n$\n(\n.range-to-example\n).\npersianDatepicker\n({\n\n    \ninline\n:\n \ntrue\n,\n\n    \naltField\n:\n \n.range-to-example-alt\n,\n\n    \naltFormat\n:\n \nLLLL\n,\n\n    \ninitialValue\n:\n \nfalse\n,\n\n    \nonSelect\n:\n \nfunction\n \n(\nunix\n)\n \n{\n\n        \nto\n.\ntouched\n \n=\n \ntrue\n;\n\n        \nif\n \n(\nfrom\n \n \nfrom\n.\noptions\n \n \nfrom\n.\noptions\n.\nmaxDate\n \n!=\n \nunix\n)\n \n{\n\n            \nvar\n \ncachedValue\n \n=\n \nfrom\n.\ngetState\n().\nselected\n.\nunixDate\n;\n\n            \nfrom\n.\noptions\n \n=\n \n{\nmaxDate\n:\n \nunix\n};\n\n            \nif\n \n(\nfrom\n.\ntouched\n)\n \n{\n\n                \nfrom\n.\nsetDate\n(\ncachedValue\n);\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n});\n\n\nfrom\n \n=\n \n$\n(\n.range-from-example\n).\npersianDatepicker\n({\n\n    \ninline\n:\n \ntrue\n,\n\n    \naltField\n:\n \n.range-from-example-alt\n,\n\n    \naltFormat\n:\n \nLLLL\n,\n\n    \ninitialValue\n:\n \nfalse\n,\n\n    \nonSelect\n:\n \nfunction\n \n(\nunix\n)\n \n{\n\n        \nfrom\n.\ntouched\n \n=\n \ntrue\n;\n\n        \nif\n \n(\nto\n \n \nto\n.\noptions\n \n \nto\n.\noptions\n.\nminDate\n \n!=\n \nunix\n)\n \n{\n\n            \nvar\n \ncachedValue\n \n=\n \nto\n.\ngetState\n().\nselected\n.\nunixDate\n;\n\n            \nto\n.\noptions\n \n=\n \n{\nminDate\n:\n \nunix\n};\n\n            \nif\n \n(\nto\n.\ntouched\n)\n \n{\n\n                \nto\n.\nsetDate\n(\ncachedValue\n);\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\ndiv\n \nclass\n=\nrange-from-example\n/\ndiv\n\n\ndiv\n \nclass\n=\nrange-to-example\n/\ndiv\n\n\n\n\n\n\n\n\n\n\nto\n\n\n\n\n\n\n\n\n\n\nFrom", 
            "title": "Example"
        }, 
        {
            "location": "/datepicker/example/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/datepicker/example/#normal-example", 
            "text": "$ ( .normal-example ). persianDatepicker ();   input   class = normal-example   /   Datepicker", 
            "title": "normal example"
        }, 
        {
            "location": "/datepicker/example/#without-initialvalue", 
            "text": "$ ( .initial-value-example ). persianDatepicker ({ \n     initialValue :   false  });   input   class = initial-value-example   /   Datepicker", 
            "title": "without initialValue"
        }, 
        {
            "location": "/datepicker/example/#initialvaluetype", 
            "text": "$ ( .initial-value-type-example ). persianDatepicker ({ \n     initialValueType :   persian  });   input   class = initial-value-type-example   value = 1396-10-12   /   Datepicker   $ ( .initial-value-type-gregorian-example ). persianDatepicker ({ \n     initialValueType :   gregorian  });   input   class = initial-value-type-gregorian-example   value = 2017-1-1   /   Datepicker", 
            "title": "initialValueType"
        }, 
        {
            "location": "/datepicker/example/#inline", 
            "text": "$ ( .inline-example ). persianDatepicker ({ \n     inline :   true , \n     altField :   #inlineExampleAlt , \n     altFormat :   LLLL , \n     toolbox : { \n         calendarSwitch : { \n             enabled :   true \n         } \n     }, \n     navigator : { \n         scroll : { \n             enabled :   false \n         } \n     }, \n     maxDate :   new   persianDate (). add ( month ,   3 ). valueOf (), \n     minDate :   new   persianDate (). subtract ( month ,   3 ). valueOf (), \n     timePicker :   { \n         enabled :   true , \n         meridiem :   { \n             enabled :   true \n         } \n     }  });   ```html input id= inlineExampleAlt  class= datepicker-demo  /  div class= inline-example   /div    Datepicker", 
            "title": "inline"
        }, 
        {
            "location": "/datepicker/example/#gregorian-calendar", 
            "text": "$ ( .gregorian-example ). persianDatepicker ({ \n     inline :   true , \n     altField :   #gregorianExampleAlt , \n     altFormat :   LLLL , \n     calendarType :   gregorian , \n     toolbox : { \n         calendarSwitch : { \n             enabled :   true \n         } \n     }, \n     navigator : { \n         scroll : { \n             enabled :   false \n         } \n     }, \n     maxDate :   new   persianDate (). add ( month ,   3 ). valueOf (), \n     minDate :   new   persianDate (). subtract ( month ,   3 ). valueOf (), \n     timePicker :   { \n         enabled :   true , \n         meridiem :   { \n             enabled :   true \n         } \n     }  });   input   id = gregorianExampleAlt   class = datepicker-demo   /  div   class = gregorian-example   / div    Datepicker", 
            "title": "Gregorian Calendar"
        }, 
        {
            "location": "/datepicker/example/#change-leap-year-mode", 
            "text": "$ ( .leapyear-algorithmic ). persianDatepicker ({ \n     inline :   true ,  });  $ ( .leapyear-astronomical ). persianDatepicker ({ \n     inline :   true , \n     calendar : { \n         persian :   { \n             leapYearMode :   astronomical \n         } \n     }  });   div   class = leapyear-algorithmic   data-date = 2025/3/12   / div  div   class = leapyear-astronomical   data-date = 2025/3/12   / div     algorithmic     astronomical", 
            "title": "Change Leap Year Mode"
        }, 
        {
            "location": "/datepicker/example/#locale", 
            "text": "$ ( .locale-fa ). persianDatepicker ({ \n     inline :   true ,  });  $ ( .locale-en ). persianDatepicker ({ \n     inline :   true , \n     calendar : { \n         persian :   { \n             locale :   en \n         } \n     }  });   div   class = locale-fa   / div  div   class = locale-en   / div     fa     en", 
            "title": "locale"
        }, 
        {
            "location": "/datepicker/example/#observer", 
            "text": "true, make user able to edit date by keyboard  $ ( .observer-example ). persianDatepicker ({ \n     observer :   true , \n     format :   YYYY/MM/DD , \n     altField :   .observer-example-alt  });   input   class = observer-example   /   Alt field   Datepicker", 
            "title": "Observer"
        }, 
        {
            "location": "/datepicker/example/#format", 
            "text": "More options in  Persian Date Documents  $ ( .format-example ). persianDatepicker ({ \n     format :   LLLL   });   input   class = format-example   /   Datepicker", 
            "title": "format"
        }, 
        {
            "location": "/datepicker/example/#formatter", 
            "text": "$ ( .formatter-example ). persianDatepicker ({ \n     formatter :   function ( unix ){ \n         return   selected unix:    +   unix ;  \n     }   });   input   class = formatter-example   /   Datepicker", 
            "title": "formatter"
        }, 
        {
            "location": "/datepicker/example/#altfield", 
            "text": "$ ( .alt-field-example ). persianDatepicker ({ \n     altField :   .alt-field-example-alt-field  });   input   class = alt-field-example   /   Alt field   Datepicker", 
            "title": "altField"
        }, 
        {
            "location": "/datepicker/example/#viewmode", 
            "text": "$ ( .view-mode-example ). persianDatepicker ({ \n     viewMode :   year  });   input   class = view-mode-example   /   Datepicker", 
            "title": "viewMode"
        }, 
        {
            "location": "/datepicker/example/#mindate", 
            "text": "$ ( .min-date-example ). persianDatepicker ({ \n     minDate :   new   persianDate (). unix ()  });   input   class = min-date-example   /   Datepicker", 
            "title": "minDate"
        }, 
        {
            "location": "/datepicker/example/#maxdate", 
            "text": "$ ( .max-date-example ). persianDatepicker ({ \n     maxDate :   new   persianDate (). unix ()  });   input   class = max-date-example   /   Datepicker", 
            "title": "maxDate"
        }, 
        {
            "location": "/datepicker/example/#checkdate", 
            "text": "$ ( .check-date-example ). persianDatepicker ({ \n     checkDate :   function ( unix ){ \n         return   new   persianDate ( unix ). day ()   !=   4 ; \n     }  });   input   class = check-date-example   /   Datepicker", 
            "title": "checkDate"
        }, 
        {
            "location": "/datepicker/example/#checkmonth", 
            "text": "$ ( .check-month-example ). persianDatepicker ({ \n     checkMonth :   function ( month ){ \n         return   month     6 ; \n     }  });   input   class = check-month-example   /   Datepicker", 
            "title": "checkMonth"
        }, 
        {
            "location": "/datepicker/example/#checkyear", 
            "text": "$ ( .check-year-example ). persianDatepicker ({ \n     checkYear :   function ( year ){ \n         return   year   =   1391 ; \n     }  });   input   class = check-year-example   /   Datepicker", 
            "title": "checkYear"
        }, 
        {
            "location": "/datepicker/example/#onlytimepicker", 
            "text": "$ ( .only-timepicker-example ). persianDatepicker ({ \n     onlyTimePicker :   true  });   input   class = only-timepicker-example   /   Datepicker", 
            "title": "onlyTimePicker"
        }, 
        {
            "location": "/datepicker/example/#autoclose", 
            "text": "$ ( .auto-close-example ). persianDatepicker ({ \n     autoClose :   true  });   input   class = auto-close-example   /   Datepicker", 
            "title": "autoClose"
        }, 
        {
            "location": "/datepicker/example/#onselect", 
            "text": "$ ( .on-select-example ). persianDatepicker ({ \n     onSelect :   function ( unix ){ \n         console . log ( datepicker select :    +   unix ); \n     }  });   input   class = on-select-example   /   Datepicker", 
            "title": "onSelect"
        }, 
        {
            "location": "/datepicker/example/#range-selector", 
            "text": "Range Selector that make sure 'to' date is after 'from' date and also 'from' is before 'to' date.  var   to ,   from ;  to   =   $ ( .range-to-example ). persianDatepicker ({ \n     inline :   true , \n     altField :   .range-to-example-alt , \n     altFormat :   LLLL , \n     initialValue :   false , \n     onSelect :   function   ( unix )   { \n         to . touched   =   true ; \n         if   ( from     from . options     from . options . maxDate   !=   unix )   { \n             var   cachedValue   =   from . getState (). selected . unixDate ; \n             from . options   =   { maxDate :   unix }; \n             if   ( from . touched )   { \n                 from . setDate ( cachedValue ); \n             } \n         } \n     }  });  from   =   $ ( .range-from-example ). persianDatepicker ({ \n     inline :   true , \n     altField :   .range-from-example-alt , \n     altFormat :   LLLL , \n     initialValue :   false , \n     onSelect :   function   ( unix )   { \n         from . touched   =   true ; \n         if   ( to     to . options     to . options . minDate   !=   unix )   { \n             var   cachedValue   =   to . getState (). selected . unixDate ; \n             to . options   =   { minDate :   unix }; \n             if   ( to . touched )   { \n                 to . setDate ( cachedValue ); \n             } \n         } \n     }  });   div   class = range-from-example / div  div   class = range-to-example / div     to      From", 
            "title": "Range selector"
        }, 
        {
            "location": "/datepicker/playground-page/", 
            "text": "redirect page to playground\n\n\npersian datepicker playground page", 
            "title": "Playground"
        }, 
        {
            "location": "/datepicker/playground-page/#redirect-page-to-playground", 
            "text": "persian datepicker playground page", 
            "title": "redirect page to playground"
        }, 
        {
            "location": "/datepicker/options/", 
            "text": "Config\n\n\npersian-datepicker configuration document\n\n\nKind\n: global constant  \n\n\n\n\nConfig\n\n\n.calendarType\n : \nstring\n\n\n.calendar\n : \nobject\n\n\n.persian\n : \nobject\n\n\n.locale\n : \nstring\n\n\n.showHint\n : \nboolean\n\n\n.leapYearMode\n : \nstring\n\n\n\n\n\n\n.gregorian\n : \nobject\n\n\n.locale\n : \nstring\n\n\n.showHint\n : \nboolean\n\n\n\n\n\n\n\n\n\n\n.responsive\n : \nboolean\n\n\n.inline\n : \nboolean\n\n\n.initialValue\n : \nboolean\n\n\n.initialValueType\n : \nboolean\n\n\n.persianDigit\n : \nboolean\n\n\n.viewMode\n : \nstring\n\n\n.format\n : \nboolean\n\n\n.altField\n : \nboolean\n\n\n.altFormat\n : \nstring\n\n\n.minDate\n : \nDate\n\n\n.maxDate\n : \nDate\n\n\n.navigator\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.scroll\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n\n\n\n\n.text\n\n\n.btnNextText\n\n\n.btnPrevText\n\n\n\n\n\n\n\"onNext\"\n\n\n\"onPrev\"\n\n\n\"onSwitch\"\n\n\n\n\n\n\n.toolbox\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.text\n : \nobject\n\n\n.btnToday\n : \nstring\n\n\n\n\n\n\n.submitButton\n\n\n.enabled\n : \nboolean\n\n\n.text\n : \nobject\n\n\n.fa\n : \nobject\n\n\n.en\n : \nobject\n\n\n\n\n\n\n\"onSubmit\"\n\n\n\n\n\n\n.todayButton\n\n\n.enabled\n : \nboolean\n\n\n.text\n : \nobject\n\n\n.fa\n : \nobject\n\n\n.en\n : \nobject\n\n\n\n\n\n\n\"onToday\"\n\n\n\n\n\n\n.calendarSwitch\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.format\n : \nstring\n\n\n\"onSwitch\"\n\n\n\n\n\n\n\"onToday\" (toolbox)\n\n\n\n\n\n\n.onlyTimePicker\n : \nboolean\n\n\n.onlySelectOnDate\n : \nboolean\n\n\n.timePicker\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nnumber\n\n\n.hour\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n.minute\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n.second\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n.meridian\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n\n\n\n\n\n\n\n\n.dayPicker\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.titleFormat\n : \nstring\n\n\n.titleFormatter(year, month)\n \u21d2 \n*\n\n\n\"onSelect\" (selectedDayUnix)\n\n\n\n\n\n\n.monthPicker\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.titleFormat\n : \nstring\n\n\n.titleFormatter(unix)\n \u21d2 \n*\n\n\n\"onSelect\" (monthIndex)\n\n\n\n\n\n\n.yearPicker\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.titleFormat\n : \nstring\n\n\n.titleFormatter(year)\n \u21d2 \nstring\n\n\n\"onSelect\" (year)\n\n\n\n\n\n\n.position\n : \nstring\n | \narray\n\n\n.autoClose\n : \nboolean\n\n\n.template\n : \nstring\n\n\n.observer\n : \nboolean\n\n\n.inputDelay\n : \nnumber\n\n\n.formatter(unixDate)\n\n\n.altFieldFormatter(unixDate)\n\n\n.checkDate()\n : \nfunction\n\n\n.checkMonth()\n : \nfunction\n\n\n.checkYear()\n : \nfunction\n\n\n\"onSelect\" (unixDate)\n\n\n\"onSet\" (unixDate)\n\n\n\"onShow\"\n\n\n\"onHide\"\n\n\n\"onToggle\"\n\n\n\"onDestroy\"\n\n\n\n\n\n\n\n\n\n\nConfig.calendarType : \nstring\n\n\nset default calendar mode of datepicker, available options: 'persian', 'gregorian'\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \npersian\n\n\nSince\n: 1.0.0\n\n\n\n\nConfig.calendar : \nobject\n\n\ncalendar type and localization configuration\n\n\nKind\n: static property of \nConfig\n\n\nSince\n: 1.0.0\n\n\nExample\n  \n\n\n{\n\n    \npersian\n:\n \n{\n\n        \nlocale\n:\n \nfa\n,\n\n        \nshowHint\n:\n \nfalse\n,\n\n        \nleapYearMode\n:\n \nalgorithmic\n \n// \nastronomical\n\n    \n},\n\n\n    \ngregorian\n:\n \n{\n\n        \nlocale\n:\n \nen\n,\n\n        \nshowHint\n:\n \nfalse\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n.calendar\n : \nobject\n\n\n.persian\n : \nobject\n\n\n.locale\n : \nstring\n\n\n.showHint\n : \nboolean\n\n\n.leapYearMode\n : \nstring\n\n\n\n\n\n\n.gregorian\n : \nobject\n\n\n.locale\n : \nstring\n\n\n.showHint\n : \nboolean\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncalendar.persian : \nobject\n\n\nPersian calendar configuration\n\n\nKind\n: static property of \ncalendar\n\n\nSince\n: 1.0.0  \n\n\n\n\n.persian\n : \nobject\n\n\n.locale\n : \nstring\n\n\n.showHint\n : \nboolean\n\n\n.leapYearMode\n : \nstring\n\n\n\n\n\n\n\n\n\n\npersian.locale : \nstring\n\n\nset locale of Persian calendar available options: 'fa', 'en'\n\n\nKind\n: static property of \npersian\n\n\nDefault\n: \nfa\n\n\nSince\n: 1.0.0\n\n\n\n\npersian.showHint : \nboolean\n\n\nif set true, small date hint of this calendar will be shown on another calendar\n\n\nKind\n: static property of \npersian\n\n\nDefault\n: \nfalse\n\n\nSince\n: 1.0.0\n\n\n\n\npersian.leapYearMode : \nstring\n\n\nPersian calendar leap year calculation mode, available options: 'algorithmic', 'astronomical'\n\n\nKind\n: static property of \npersian\n\n\nDefault\n: \nalgorithmic\n\n\nLink\n: http://babakhani.github.io/PersianWebToolkit/doc/persian-date/leapyear\n\n\nSince\n: 1.0.0\n\n\n\n\ncalendar.gregorian : \nobject\n\n\nGregorian calendar configuration\n\n\nKind\n: static property of \ncalendar\n\n\nSince\n: 1.0.0  \n\n\n\n\n.gregorian\n : \nobject\n\n\n.locale\n : \nstring\n\n\n.showHint\n : \nboolean\n\n\n\n\n\n\n\n\n\n\ngregorian.locale : \nstring\n\n\nset locale of Gregorian calendar available options: 'fa', 'en'\n\n\nKind\n: static property of \ngregorian\n\n\nDefault\n: \nen\n\n\nSince\n: 1.0.0\n\n\n\n\ngregorian.showHint : \nboolean\n\n\nif set true, small date hint of this calendar will be shown on another calendar\n\n\nKind\n: static property of \ngregorian\n\n\nDefault\n: \nfalse\n\n\nSince\n: 1.0.0\n\n\n\n\nConfig.responsive : \nboolean\n\n\nif set true make enable responsive view on mobile devices\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \ntrue\n\n\nSince\n: 1.0.0\n\n\n\n\nConfig.inline : \nboolean\n\n\nif true datepicker render inline\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nfalse\n\n\n\n\nConfig.initialValue : \nboolean\n\n\nIf set true datepicker init with input value date, use data-date property when you want set inline datepicker initial value\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \ntrue\n\n\n\n\nConfig.initialValueType : \nboolean\n\n\nInitial value calendar type, accept: 'persian', 'gregorian'\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \ntrue\n\n\n\n\nConfig.persianDigit : \nboolean\n\n\nDeprecated\n\n\nfrom v1.0.0 this options is deprecated, use calendar.persian.locale instead\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \ntrue\n\n\n\n\nConfig.viewMode : \nstring\n\n\ndefault view mode, Acceptable value : day,month,year\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nday\n\n\n\n\nConfig.format : \nboolean\n\n\nthe date format, combination of d, dd, m, mm, yy, yyyy.\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nLLLL\n\n\nLink\n: http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format\n\n\n\n\nConfig.altField : \nboolean\n\n\nAn input element that is to be updated with the selected date from the datepicker. Use the altFormat option to change the format of the date within this field. Leave as blank for no alternate field. acceptable value: : '#elementId','.element-class'\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nfalse\n\n\nExample\n  \n\n\naltField\n:\n \n#inputAltFirld\n\n\n\naltField\n:\n \n.input-alt-field\n\n\n\n\n\n\n\n\nConfig.altFormat : \nstring\n\n\nthe date format, combination of d, dd, m, mm, yy, yyyy.\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nunix\n\n\nLink\n: http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format\n\n\n\n\nConfig.minDate : \nDate\n\n\nSet min date on datepicker, prevent user select date before given unix time\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nnull\n\n\nProperties\n\n\n\n  \n\n    \n\n      \nName\n\n    \n\n  \n\n  \n\n\n\n    \nminDate\n\n    \n  \n\n\n\n\n\n\n\nConfig.maxDate : \nDate\n\n\nSet max date on datepicker, prevent user select date after given unix time\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nnull\n\n\nProperties\n\n\n\n  \n\n    \n\n      \nName\n\n    \n\n  \n\n  \n\n\n\n    \nmaxDate\n\n    \n  \n\n\n\n\n\n\n\nConfig.navigator : \nobject\n\n\nnavigator config object\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \ntrue\n  \n\n\n\n\n.navigator\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.scroll\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n\n\n\n\n.text\n\n\n.btnNextText\n\n\n.btnPrevText\n\n\n\n\n\n\n\"onNext\"\n\n\n\"onPrev\"\n\n\n\"onSwitch\"\n\n\n\n\n\n\n\n\n\n\nnavigator.enabled : \nboolean\n\n\nmake navigator enable or disable\n\n\nKind\n: static property of \nnavigator\n\n\nDefault\n: \ntrue\n\n\n\n\nnavigator.scroll : \nobject\n\n\nscroll navigation options\n\n\nKind\n: static property of \nnavigator\n\n\n\n\nscroll.enabled : \nboolean\n\n\nif you want make disable scroll navigation set this option false\n\n\nKind\n: static property of \nscroll\n\n\nDefault\n: \ntrue\n\n\n\n\nnavigator.text\n\n\nnavigator text config object\n\n\nKind\n: static property of \nnavigator\n  \n\n\n\n\n.text\n\n\n.btnNextText\n\n\n.btnPrevText\n\n\n\n\n\n\n\n\n\n\ntext.btnNextText\n\n\ntext of next button\n\n\nKind\n: static property of \ntext\n\n\nDefault\n: \n\n\n\n\ntext.btnPrevText\n\n\ntext of prev button\n\n\nKind\n: static property of \ntext\n\n\nDefault:\n: '\n'\n\n\n\n\n\"onNext\"\n\n\nCalled when navigator goes to next state\n\n\nKind\n: event emitted by \nnavigator\n\n\nExample\n  \n\n\nfunction\n \n(\nnavigator\n)\n \n{\n\n     \n//log(\nnavigator next \n);\n\n \n}\n\n\n\n\n\n\n\n\n\"onPrev\"\n\n\nCalled when navigator goes to previews state\n\n\nKind\n: event emitted by \nnavigator\n\n\nExample\n  \n\n\nfunction\n \n(\nnavigator\n)\n \n{\n\n     \n//log(\nnavigator prev \n);\n\n \n}\n\n\n\n\n\n\n\n\n\"onSwitch\"\n\n\nCalled when navigator switch\n\n\nKind\n: event emitted by \nnavigator\n\n\nExample\n  \n\n\nfunction\n \n(\ndatepickerObject\n)\n \n{\n\n                \n// console.log(\nnavigator switch \n);\n\n \n}\n\n\n\n\n\n\n\n\nConfig.toolbox : \nobject\n\n\ntoolbox config object\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \ntrue\n  \n\n\n\n\n.toolbox\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.text\n : \nobject\n\n\n.btnToday\n : \nstring\n\n\n\n\n\n\n.submitButton\n\n\n.enabled\n : \nboolean\n\n\n.text\n : \nobject\n\n\n.fa\n : \nobject\n\n\n.en\n : \nobject\n\n\n\n\n\n\n\"onSubmit\"\n\n\n\n\n\n\n.todayButton\n\n\n.enabled\n : \nboolean\n\n\n.text\n : \nobject\n\n\n.fa\n : \nobject\n\n\n.en\n : \nobject\n\n\n\n\n\n\n\"onToday\"\n\n\n\n\n\n\n.calendarSwitch\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.format\n : \nstring\n\n\n\"onSwitch\"\n\n\n\n\n\n\n\"onToday\" (toolbox)\n\n\n\n\n\n\n\n\n\n\ntoolbox.enabled : \nboolean\n\n\nboolean option that make toolbar enable or disable\n\n\nKind\n: static property of \ntoolbox\n\n\nDefault\n: \ntrue\n\n\n\n\ntoolbox.text : \nobject\n\n\nDeprecated\n\n\ntoolbox button text configuration\n\n\nKind\n: static property of \ntoolbox\n\n\n\n\ntext.btnToday : \nstring\n\n\nDeprecated\n\n\ntext of today button, deprecated from 1.0.0\n\n\nKind\n: static property of \ntext\n\n\nDefault\n: \n\u0627\u0645\u0631\u0648\u0632\n\n\n\n\ntoolbox.submitButton\n\n\nsubmit button configuration (only shown on mobile)\n\n\nKind\n: static property of \ntoolbox\n\n\nSince\n: 1.0.0  \n\n\n\n\n.submitButton\n\n\n.enabled\n : \nboolean\n\n\n.text\n : \nobject\n\n\n.fa\n : \nobject\n\n\n.en\n : \nobject\n\n\n\n\n\n\n\"onSubmit\"\n\n\n\n\n\n\n\n\n\n\nsubmitButton.enabled : \nboolean\n\n\nmake submit button enable or disable\n\n\nKind\n: static property of \nsubmitButton\n\n\nDefault\n: \nfalse\n\n\nSince\n: 1.0.0\n\n\n\n\nsubmitButton.text : \nobject\n\n\nsubmit button text\n\n\nKind\n: static property of \nsubmitButton\n\n\nSince\n: 1.0.0  \n\n\n\n\n.text\n : \nobject\n\n\n.fa\n : \nobject\n\n\n.en\n : \nobject\n\n\n\n\n\n\n\n\n\n\ntext.fa : \nobject\n\n\nshow when current calendar is Persian\n\n\nKind\n: static property of \ntext\n\n\nDefault\n: \n\u062a\u0627\u06cc\u06cc\u062f\n\n\nSince\n: 1.0.0\n\n\n\n\ntext.en : \nobject\n\n\nshow when current calendar is Gregorian\n\n\nKind\n: static property of \ntext\n\n\nDefault\n: \nsubmit\n\n\nSince\n: 1.0.0\n\n\n\n\n\"onSubmit\"\n\n\nCalled when submit button clicked\n\n\nKind\n: event emitted by \nsubmitButton\n\n\nSince\n: 1.0.0\n\n\n\n\ntoolbox.todayButton\n\n\ntoolbox today button configuration\n\n\nKind\n: static property of \ntoolbox\n\n\nSince\n: 1.0.0  \n\n\n\n\n.todayButton\n\n\n.enabled\n : \nboolean\n\n\n.text\n : \nobject\n\n\n.fa\n : \nobject\n\n\n.en\n : \nobject\n\n\n\n\n\n\n\"onToday\"\n\n\n\n\n\n\n\n\n\n\ntodayButton.enabled : \nboolean\n\n\nmake toolbox today button enable or disable\n\n\nKind\n: static property of \ntodayButton\n\n\nSince\n: 1.0.0\n\n\n\n\ntodayButton.text : \nobject\n\n\ntoday button text\n\n\nKind\n: static property of \ntodayButton\n\n\nSince\n: 1.0.0  \n\n\n\n\n.text\n : \nobject\n\n\n.fa\n : \nobject\n\n\n.en\n : \nobject\n\n\n\n\n\n\n\n\n\n\ntext.fa : \nobject\n\n\nshow when current calendar is Persian\n\n\nKind\n: static property of \ntext\n\n\nDefault\n: \n\u0627\u0645\u0631\u0648\u0632\n\n\nSince\n: 1.0.0\n\n\n\n\ntext.en : \nobject\n\n\nshow when current calendar is Gregorian\n\n\nKind\n: static property of \ntext\n\n\nDefault\n: \ntoday\n\n\nSince\n: 1.0.0\n\n\n\n\n\"onToday\"\n\n\nCalled when today button clicked\n\n\nKind\n: event emitted by \ntodayButton\n\n\nSince\n: 1.0.0\n\n\n\n\ntoolbox.calendarSwitch : \nobject\n\n\ntoolbox calendar switch configuration\n\n\nKind\n: static property of \ntoolbox\n\n\nSince\n: 1.0.0  \n\n\n\n\n.calendarSwitch\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.format\n : \nstring\n\n\n\"onSwitch\"\n\n\n\n\n\n\n\n\n\n\ncalendarSwitch.enabled : \nboolean\n\n\nmake calendar switch enable or disable\n\n\nKind\n: static property of \ncalendarSwitch\n\n\nDefault\n: \ntrue\n\n\nSince\n: 1.0.0\n\n\n\n\ncalendarSwitch.format : \nstring\n\n\ncalendar switch text format string\n\n\nKind\n: static property of \ncalendarSwitch\n\n\nDefault\n: \nMMMM\n\n\nLink\n: http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format\n\n\nSince\n: 1.0.0\n\n\n\n\n\"onSwitch\"\n\n\nCalled when calendar switch clicked\n\n\nKind\n: event emitted by \ncalendarSwitch\n\n\nSince\n: 1.0.0\n\n\n\n\n\"onToday\" (toolbox)\n\n\nDeprecated\n\n\nKind\n: event emitted by \ntoolbox\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \ntoolbox\n\n    \n  \n\n\n\n\nExample\n  \n\n\nfunction\n \n(\ntoolbox\n)\n \n{\n\n     \n//log(\ntoolbox today btn\n);\n\n \n}\n\n\n\n\n\n\n\n\nConfig.onlyTimePicker : \nboolean\n\n\nif true all pickers hide and just show timepicker\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nfalse\n\n\n\n\nConfig.onlySelectOnDate : \nboolean\n\n\nif true date select just by click on day in month grid, and when user select month or year selected date doesnt change\n\n\nKind\n: static property of \nConfig\n\n\nDefault:\n: true\n\n\nProperties\n\n\n\n  \n\n    \n\n      \nName\n\n    \n\n  \n\n  \n\n\n\n    \njustSelectOnDate\n\n    \n  \n\n\n\n\n\n\n\nConfig.timePicker : \nobject\n\n\ntimePicker configuration\n\n\nKind\n: static property of \nConfig\n  \n\n\n\n\n.timePicker\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nnumber\n\n\n.hour\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n.minute\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n.second\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n.meridian\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntimePicker.enabled : \nboolean\n\n\nmake timePicker enable or disable\n\n\nKind\n: static property of \ntimePicker\n\n\n\n\ntimePicker.step : \nnumber\n\n\nThe amount that increases or decreases by pressing the button\n\n\nKind\n: static property of \ntimePicker\n\n\n\n\ntimePicker.hour : \nobject\n\n\nhour selector configuration\n\n\nKind\n: static property of \ntimePicker\n  \n\n\n\n\n.hour\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n\n\n\n\nhour.enabled : \nboolean\n\n\nmake hour selector enable or disable\n\n\nKind\n: static property of \nhour\n\n\n\n\nhour.step : \nboolean\n\n\nThe amount that increases or decreases hour, by pressing the button. overwrite by timepicker.step\n\n\nKind\n: static property of \nhour\n\n\n\n\ntimePicker.minute : \nobject\n\n\nminute selector configuration\n\n\nKind\n: static property of \ntimePicker\n  \n\n\n\n\n.minute\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n\n\n\n\nminute.enabled : \nboolean\n\n\nmake minute selector enable or disable\n\n\nKind\n: static property of \nminute\n\n\n\n\nminute.step : \nboolean\n\n\noverwrite by parent step\n\n\nKind\n: static property of \nminute\n\n\n\n\ntimePicker.second : \nobject\n\n\nsecond selector configuration\n\n\nKind\n: static property of \ntimePicker\n  \n\n\n\n\n.second\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.step\n : \nboolean\n\n\n\n\n\n\n\n\n\n\nsecond.enabled : \nboolean\n\n\nmake second selector enable or disable\n\n\nKind\n: static property of \nsecond\n\n\n\n\nsecond.step : \nboolean\n\n\nThe amount that increases or decreases second, by pressing the button. overwrite by timepicker.step\n\n\nKind\n: static property of \nsecond\n\n\n\n\ntimePicker.meridian : \nobject\n\n\nmeridian selector configuration\n\n\nKind\n: static property of \ntimePicker\n\n\n\n\nmeridian.enabled : \nboolean\n\n\nif you set this as false, datepicker timepicker system moved to 24-hour system\n\n\nKind\n: static property of \nmeridian\n\n\n\n\nConfig.dayPicker : \nobject\n\n\ndayPicker configuration\n\n\nKind\n: static property of \nConfig\n  \n\n\n\n\n.dayPicker\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.titleFormat\n : \nstring\n\n\n.titleFormatter(year, month)\n \u21d2 \n*\n\n\n\"onSelect\" (selectedDayUnix)\n\n\n\n\n\n\n\n\n\n\ndayPicker.enabled : \nboolean\n\n\nmake daypicker enable or disable\n\n\nKind\n: static property of \ndayPicker\n\n\nDefault\n: \ntrue\n\n\n\n\ndayPicker.titleFormat : \nstring\n\n\ndaypicker title format string\n\n\nKind\n: static property of \ndayPicker\n\n\nDefault\n: \nYYYY MMMM\n\n\nLink\n: http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format\n\n\n\n\ndayPicker.titleFormatter(year, month) \u21d2 \n*\n\n\ndaypicker title formatter function\n\n\nKind\n: static method of \ndayPicker\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nyear\n\n    \n\n    \nmonth\n\n    \n  \n\n\n\n\n\n\n\"onSelect\" (selectedDayUnix)\n\n\nfired when user select date\n\n\nKind\n: event emitted by \ndayPicker\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nselectedDayUnix\n\n    \n  \n\n\n\n\n\n\nConfig.monthPicker : \nobject\n\n\nmonthPicker configuration\n\n\nKind\n: static property of \nConfig\n  \n\n\n\n\n.monthPicker\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.titleFormat\n : \nstring\n\n\n.titleFormatter(unix)\n \u21d2 \n*\n\n\n\"onSelect\" (monthIndex)\n\n\n\n\n\n\n\n\n\n\nmonthPicker.enabled : \nboolean\n\n\nmake monthPicker enable or disable\n\n\nKind\n: static property of \nmonthPicker\n\n\nDefault\n: \ntrue\n\n\n\n\nmonthPicker.titleFormat : \nstring\n\n\nmonthPicker title format string\n\n\nKind\n: static property of \nmonthPicker\n\n\nDefault\n: \nYYYY\n\n\n\n\nmonthPicker.titleFormatter(unix) \u21d2 \n*\n\n\nmonthPicker title formatter function\n\n\nKind\n: static method of \nmonthPicker\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nunix\n\n    \n  \n\n\n\n\n\n\n\"onSelect\" (monthIndex)\n\n\nfired when user select month\n\n\nKind\n: event emitted by \nmonthPicker\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nmonthIndex\n\n    \n  \n\n\n\n\n\n\nConfig.yearPicker : \nobject\n\n\nyearPicker configuration\n\n\nKind\n: static property of \nConfig\n  \n\n\n\n\n.yearPicker\n : \nobject\n\n\n.enabled\n : \nboolean\n\n\n.titleFormat\n : \nstring\n\n\n.titleFormatter(year)\n \u21d2 \nstring\n\n\n\"onSelect\" (year)\n\n\n\n\n\n\n\n\n\n\nyearPicker.enabled : \nboolean\n\n\nmake yearPicker enable or disable\n\n\nKind\n: static property of \nyearPicker\n\n\nDefault\n: \ntrue\n\n\n\n\nyearPicker.titleFormat : \nstring\n\n\nyearPicker title format string\n\n\nKind\n: static property of \nyearPicker\n\n\nDefault\n: \nYYYY\n\n\n\n\nyearPicker.titleFormatter(year) \u21d2 \nstring\n\n\nyearPicker title formatter function\n\n\nKind\n: static method of \nyearPicker\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nyear\n\n    \n  \n\n\n\n\n\n\n\"onSelect\" (year)\n\n\nfired when user select year\n\n\nKind\n: event emitted by \nyearPicker\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nyear\n\n    \n  \n\n\n\n\n\n\nConfig.position : \nstring\n | \narray\n\n\nposition of datepicker relative to input element\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nauto\n\n\nExample\n  \n\n\nposition\n:\n \nauto\n\n\nposition\n:\n \n[\n10\n,\n10\n]\n\n\n\n\n\n\n\n\nConfig.autoClose : \nboolean\n\n\nIf true datepicker close When select a date\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nfalse\n\n\n\n\nConfig.template : \nstring\n\n\nby default datepicker have a template string, and you can overwrite it simply by replace string in config.\n\n\nKind\n: static property of \nConfig\n\n\nExample\n  \n\n\ndiv\n \nid\n=\nplotId\n \nclass\n=\ndatepicker-plot-area datepicker-plot-area-inline-view\n\n     \n{{\n#\nnavigator\n.\nenabled\n}}\n\n     \ndiv\n \nclass\n=\nnavigator\n\n     \ndiv\n \nclass\n=\ndatepicker-header\n\n     \ndiv\n \nclass\n=\nbtn btn-next\n{{\nnavigator\n.\ntext\n.\nbtnNextText\n}}\n/div\n\n     \ndiv\n \nclass\n=\nbtn btn-switch\n{{\n \nnavigator\n.\nswitch\n.\ntext\n \n}}\n/div\n\n     \ndiv\n \nclass\n=\nbtn btn-prev\n{{\nnavigator\n.\ntext\n.\nbtnPrevText\n}}\n/div\n\n     \n/div\n\n     \n/div\n\n     \n{{\n/navigator.enabled}}\n\n     \ndiv\n \nclass\n=\ndatepicker-grid-view\n \n\n     \n{{\n#\ndays\n.\nenabled\n}}\n\n     \n{{\n#\ndays\n.\nviewMode\n}}\n\n     \ndiv\n \nclass\n=\ndatepicker-day-view\n \n\n     \ndiv\n \nclass\n=\nmonth-grid-box\n\n     \ndiv\n \nclass\n=\nheader\n\n     \ndiv\n \nclass\n=\ntitle\n/div\n\n     \ndiv\n \nclass\n=\nheader-row\n\n     \ndiv\n \nclass\n=\nheader-row-cell\n\u0634\n/div\n\n     \ndiv\n \nclass\n=\nheader-row-cell\n\u06cc\n/div\n\n     \ndiv\n \nclass\n=\nheader-row-cell\n\u062f\n/div\n\n     \ndiv\n \nclass\n=\nheader-row-cell\n\u0633\n/div\n\n     \ndiv\n \nclass\n=\nheader-row-cell\n\u0686\n/div\n\n     \ndiv\n \nclass\n=\nheader-row-cell\n\u067e\n/div\n\n     \ndiv\n \nclass\n=\nheader-row-cell\n\u062c\n/div\n\n     \n/div\n\n     \n/div\n\n     \ntable\n \ncellspacing\n=\n0\n \nclass\n=\ntable-days\n\n     \ntbody\n\n     \n{{\n#\ndays\n.\nlist\n}}\n\n\n     \ntr\n\n     \n{{\n#\n.}}\n\n\n     \n{{\n#\nenabled\n}}\n\n     \ntd\n \ndata\n-\nunix\n=\n{{dataUnix}}\n \nspan\n  \nclass\n=\n{{#otherMonth}}other-month{{/otherMonth}} {{#selected}}selected{{/selected}}\n{{\ntitle\n}}\n/span\n/td\n\n     \n{{\n/enabled}}\n\n     \n{{\n^\nenabled\n}}\n\n     \ntd\n \ndata\n-\nunix\n=\n{{dataUnix}}\n \nclass\n=\ndisabled\nspan\n \nclass\n=\n{{#otherMonth}}other-month{{/otherMonth}}\n{{\ntitle\n}}\n/span\n/td\n\n     \n{{\n/enabled}}\n\n\n     \n{{\n/.}}\n\n     \n/tr\n\n     \n{{\n/days.list}}\n\n     \n/tbody\n\n     \n/table\n\n     \n/div\n\n     \n/div\n\n     \n{{\n/days.viewMode}}\n\n     \n{{\n/days.enabled}}\n\n\n     \n{{\n#\nmonth\n.\nenabled\n}}\n\n     \n{{\n#\nmonth\n.\nviewMode\n}}\n\n     \ndiv\n \nclass\n=\ndatepicker-month-view\n\n     \n{{\n#\nmonth\n.\nlist\n}}\n\n     \n{{\n#\nenabled\n}}\n\n     \ndiv\n \ndata\n-\nmonth\n=\n{{dataMonth}}\n \nclass\n=\nmonth-item {{#selected}}selected{{/selected}}\n{{\ntitle\n}}\n/small\n/div\n\n     \n{{\n/enabled}}\n\n     \n{{\n^\nenabled\n}}\n\n     \ndiv\n \ndata\n-\nmonth\n=\n{{dataMonth}}\n \nclass\n=\nmonth-item month-item-disable {{#selected}}selected{{/selected}}\n{{\ntitle\n}}\n/small\n/div\n\n     \n{{\n/enabled}}\n\n     \n{{\n/month.list}}\n\n     \n/div\n\n     \n{{\n/month.viewMode}}\n\n     \n{{\n/month.enabled}}\n\n\n     \n{{\n#\nyear\n.\nenabled\n \n}}\n\n     \n{{\n#\nyear\n.\nviewMode\n \n}}\n\n     \ndiv\n \nclass\n=\ndatepicker-year-view\n \n\n     \n{{\n#\nyear\n.\nlist\n}}\n\n     \n{{\n#\nenabled\n}}\n\n     \ndiv\n \ndata\n-\nyear\n=\n{{dataYear}}\n \nclass\n=\nyear-item {{#selected}}selected{{/selected}}\n{{\ntitle\n}}\n/div\n\n     \n{{\n/enabled}}\n\n     \n{{\n^\nenabled\n}}\n\n     \ndiv\n \ndata\n-\nyear\n=\n{{dataYear}}\n \nclass\n=\nyear-item year-item-disable {{#selected}}selected{{/selected}}\n{{\ntitle\n}}\n/div\n\n     \n{{\n/enabled}}\n\n     \n{{\n/year.list}}\n\n     \n/div\n\n     \n{{\n/year.viewMode }}\n\n     \n{{\n/year.enabled }}\n\n\n     \n/div\n\n     \n{{\n#\ntime\n}}\n\n     \n{{\n#\nenabled\n}}\n\n     \ndiv\n \nclass\n=\ndatepicker-time-view\n\n     \n{{\n#\nhour\n.\nenabled\n}}\n\n     \ndiv\n \nclass\n=\nhour time-segment\n \ndata\n-\ntime\n-\nkey\n=\nhour\n\n     \ndiv\n \nclass\n=\nup-btn\n \ndata\n-\ntime\n-\nkey\n=\nhour\n\u25b2\n/div\n\n     \ninput\n \nvalue\n=\n{{hour.title}}\n \ntype\n=\ntext\n \nplaceholder\n=\nhour\n \nclass\n=\nhour-input\n\n     \ndiv\n \nclass\n=\ndown-btn\n \ndata\n-\ntime\n-\nkey\n=\nhour\n\u25bc\n/div\n\n     \n/div\n\n     \ndiv\n \nclass\n=\ndivider\n:\n/div\n\n     \n{{\n/hour.enabled}}\n\n     \n{{\n#\nminute\n.\nenabled\n}}\n\n     \ndiv\n \nclass\n=\nminute time-segment\n \ndata\n-\ntime\n-\nkey\n=\nminute\n \n\n     \ndiv\n \nclass\n=\nup-btn\n \ndata\n-\ntime\n-\nkey\n=\nminute\n\u25b2\n/div\n\n     \ninput\n \nvalue\n=\n{{minute.title}}\n \ntype\n=\ntext\n \nplaceholder\n=\nminute\n \nclass\n=\nminute-input\n\n     \ndiv\n \nclass\n=\ndown-btn\n \ndata\n-\ntime\n-\nkey\n=\nminute\n\u25bc\n/div\n\n     \n/div\n\n     \ndiv\n \nclass\n=\ndivider second-divider\n:\n/div\n\n     \n{{\n/minute.enabled}}\n\n     \n{{\n#\nsecond\n.\nenabled\n}}\n\n     \ndiv\n \nclass\n=\nsecond time-segment\n \ndata\n-\ntime\n-\nkey\n=\nsecond\n  \n\n     \ndiv\n \nclass\n=\nup-btn\n \ndata\n-\ntime\n-\nkey\n=\nsecond\n \n\u25b2\n/div\n\n     \ninput\n \nvalue\n=\n{{second.title}}\n  \ntype\n=\ntext\n \nplaceholder\n=\nsecond\n \nclass\n=\nsecond-input\n\n     \ndiv\n \nclass\n=\ndown-btn\n \ndata\n-\ntime\n-\nkey\n=\nsecond\n \n\u25bc\n/div\n\n     \n/div\n\n     \ndiv\n \nclass\n=\ndivider meridian-divider\n/div\n\n     \ndiv\n \nclass\n=\ndivider meridian-divider\n/div\n\n     \n{{\n/second.enabled}}\n\n     \n{{\n#\nmeridian\n.\nenabled\n}}\n\n     \ndiv\n \nclass\n=\nmeridian time-segment\n \ndata\n-\ntime\n-\nkey\n=\nmeridian\n \n\n     \ndiv\n \nclass\n=\nup-btn\n \ndata\n-\ntime\n-\nkey\n=\nmeridian\n\u25b2\n/div\n\n     \ninput\n \nvalue\n=\n{{meridian.title}}\n \ntype\n=\ntext\n \nclass\n=\nmeridian-input\n\n     \ndiv\n \nclass\n=\ndown-btn\n \ndata\n-\ntime\n-\nkey\n=\nmeridian\n\u25bc\n/div\n\n     \n/div\n\n     \n{{\n/meridian.enabled}}\n\n     \n/div\n\n     \n{{\n/enabled}}\n\n     \n{{\n/time}}\n\n\n     \n{{\n#\ntoolbox\n}}\n\n     \n{{\n#\nenabled\n}}\n\n     \ndiv\n \nclass\n=\ntoolbox \n\n     \ndiv\n \nclass\n=\nbtn-today\n{{\ntext\n.\nbtnToday\n}}\n/div\n\n     \n/div\n\n     \n{{\n/enabled}}\n\n     \n{{\n/toolbox}}\n\n     \n/div\n\n\n\n\n\n\n\n\nConfig.observer : \nboolean\n\n\nif true datepicker update self by user inputted date string, accept 'yyyy/mm/dd'\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \nfalse\n\n\nExample\n  \n\n\n1396/10/2\n,\n \n\n\n\n\n\n\n\n\nConfig.inputDelay : \nnumber\n\n\nwaite time for last user key-down event, accept millisecond\n\n\nKind\n: static property of \nConfig\n\n\nDefault\n: \n800\n\n\n\n\nConfig.formatter(unixDate)\n\n\nformat value of input\n\n\nKind\n: static method of \nConfig\n\n\nDefault\n: \nfunction\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nunixDate\n\n    \n  \n\n\n\n\nExample\n  \n\n\nfunction\n \n(\nunixDate\n)\n \n{\n\n     \nvar\n \nself\n \n=\n \nthis\n;\n\n     \nvar\n \npdate\n \n=\n \nnew\n \npersianDate\n(\nunixDate\n);\n\n     \npdate\n.\nformatPersian\n \n=\n \nthis\n.\npersianDigit\n;\n\n     \nreturn\n \npdate\n.\nformat\n(\nself\n.\nformat\n);\n\n \n}\n\n\n\n\n\n\n\n\nConfig.altFieldFormatter(unixDate)\n\n\nformat value of 'altField' input\n\n\nKind\n: static method of \nConfig\n\n\nDefault\n: \nfunction\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nunixDate\n\n    \n  \n\n\n\n\nExample\n  \n\n\nfunction\n \n(\nunixDate\n)\n \n{\n\n     \nvar\n \nself\n \n=\n \nthis\n;\n\n     \nvar\n \nthisAltFormat\n \n=\n \nself\n.\naltFormat\n.\ntoLowerCase\n();\n\n     \nif\n \n(\nthisAltFormat\n \n===\n \ngregorian\n \n||\n \nthisAltFormat\n \n===\n \ng\n)\n \n{\n\n         \nreturn\n \nnew\n \nDate\n(\nunixDate\n);\n\n     \n}\n\n     \nif\n \n(\nthisAltFormat\n \n===\n \nunix\n \n||\n \nthisAltFormat\n \n===\n \nu\n)\n \n{\n\n         \nreturn\n \nunixDate\n;\n\n     \n}\n\n     \nelse\n \n{\n\n         \nvar\n \npd\n \n=\n \nnew\n \npersianDate\n(\nunixDate\n);\n\n         \npd\n.\nformatPersian\n \n=\n \nthis\n.\npersianDigit\n;\n\n         \nreturn\n \npd\n.\nformat\n(\nself\n.\naltFormat\n);\n\n     \n}\n\n \n}\n\n\n\n\n\n\n\n\nConfig.checkDate() : \nfunction\n\n\nValidate date access before render\n\n\nKind\n: static method of \nConfig\n\n\n\n\nConfig.checkMonth() : \nfunction\n\n\nValidate month access before render\n\n\nKind\n: static method of \nConfig\n\n\n\n\nConfig.checkYear() : \nfunction\n\n\nValidate year access before render\n\n\nKind\n: static method of \nConfig\n\n\n\n\n\"onSelect\" (unixDate)\n\n\nCalled when date Select by user.\n\n\nKind\n: event emitted by \nConfig\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nunixDate\n\n    \n  \n\n\n\n\n\n\n\"onSet\" (unixDate)\n\n\nCalled when date Select by api.\n\n\nKind\n: event emitted by \nConfig\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nunixDate\n\n    \n  \n\n\n\n\n\n\n\"onShow\"\n\n\nA function that takes current datepicker instance. It is called just before the datepicker is displayed.\n\n\nKind\n: event emitted by \nConfig\n\n\n\n\n\"onHide\"\n\n\nA function that takes current datepicker instance. It is called just before the datepicker Hide.\n\n\nKind\n: event emitted by \nConfig\n\n\n\n\n\"onToggle\"\n\n\non toggle datepicker event\n\n\nKind\n: event emitted by \nConfig\n\n\n\n\n\"onDestroy\"\n\n\non destroy datepicker event\n\n\nKind\n: event emitted by \nConfig", 
            "title": "Options"
        }, 
        {
            "location": "/datepicker/options/#config", 
            "text": "persian-datepicker configuration document  Kind : global constant     Config  .calendarType  :  string  .calendar  :  object  .persian  :  object  .locale  :  string  .showHint  :  boolean  .leapYearMode  :  string    .gregorian  :  object  .locale  :  string  .showHint  :  boolean      .responsive  :  boolean  .inline  :  boolean  .initialValue  :  boolean  .initialValueType  :  boolean  .persianDigit  :  boolean  .viewMode  :  string  .format  :  boolean  .altField  :  boolean  .altFormat  :  string  .minDate  :  Date  .maxDate  :  Date  .navigator  :  object  .enabled  :  boolean  .scroll  :  object  .enabled  :  boolean    .text  .btnNextText  .btnPrevText    \"onNext\"  \"onPrev\"  \"onSwitch\"    .toolbox  :  object  .enabled  :  boolean  .text  :  object  .btnToday  :  string    .submitButton  .enabled  :  boolean  .text  :  object  .fa  :  object  .en  :  object    \"onSubmit\"    .todayButton  .enabled  :  boolean  .text  :  object  .fa  :  object  .en  :  object    \"onToday\"    .calendarSwitch  :  object  .enabled  :  boolean  .format  :  string  \"onSwitch\"    \"onToday\" (toolbox)    .onlyTimePicker  :  boolean  .onlySelectOnDate  :  boolean  .timePicker  :  object  .enabled  :  boolean  .step  :  number  .hour  :  object  .enabled  :  boolean  .step  :  boolean    .minute  :  object  .enabled  :  boolean  .step  :  boolean    .second  :  object  .enabled  :  boolean  .step  :  boolean    .meridian  :  object  .enabled  :  boolean      .dayPicker  :  object  .enabled  :  boolean  .titleFormat  :  string  .titleFormatter(year, month)  \u21d2  *  \"onSelect\" (selectedDayUnix)    .monthPicker  :  object  .enabled  :  boolean  .titleFormat  :  string  .titleFormatter(unix)  \u21d2  *  \"onSelect\" (monthIndex)    .yearPicker  :  object  .enabled  :  boolean  .titleFormat  :  string  .titleFormatter(year)  \u21d2  string  \"onSelect\" (year)    .position  :  string  |  array  .autoClose  :  boolean  .template  :  string  .observer  :  boolean  .inputDelay  :  number  .formatter(unixDate)  .altFieldFormatter(unixDate)  .checkDate()  :  function  .checkMonth()  :  function  .checkYear()  :  function  \"onSelect\" (unixDate)  \"onSet\" (unixDate)  \"onShow\"  \"onHide\"  \"onToggle\"  \"onDestroy\"", 
            "title": "Config"
        }, 
        {
            "location": "/datepicker/options/#configcalendartype-string", 
            "text": "set default calendar mode of datepicker, available options: 'persian', 'gregorian'  Kind : static property of  Config  Default :  persian  Since : 1.0.0", 
            "title": "Config.calendarType : string"
        }, 
        {
            "location": "/datepicker/options/#configcalendar-object", 
            "text": "calendar type and localization configuration  Kind : static property of  Config  Since : 1.0.0  Example     { \n     persian :   { \n         locale :   fa , \n         showHint :   false , \n         leapYearMode :   algorithmic   //  astronomical \n     }, \n\n     gregorian :   { \n         locale :   en , \n         showHint :   false \n     }  }    .calendar  :  object  .persian  :  object  .locale  :  string  .showHint  :  boolean  .leapYearMode  :  string    .gregorian  :  object  .locale  :  string  .showHint  :  boolean", 
            "title": "Config.calendar : object"
        }, 
        {
            "location": "/datepicker/options/#calendarpersian-object", 
            "text": "Persian calendar configuration  Kind : static property of  calendar  Since : 1.0.0     .persian  :  object  .locale  :  string  .showHint  :  boolean  .leapYearMode  :  string", 
            "title": "calendar.persian : object"
        }, 
        {
            "location": "/datepicker/options/#persianlocale-string", 
            "text": "set locale of Persian calendar available options: 'fa', 'en'  Kind : static property of  persian  Default :  fa  Since : 1.0.0", 
            "title": "persian.locale : string"
        }, 
        {
            "location": "/datepicker/options/#persianshowhint-boolean", 
            "text": "if set true, small date hint of this calendar will be shown on another calendar  Kind : static property of  persian  Default :  false  Since : 1.0.0", 
            "title": "persian.showHint : boolean"
        }, 
        {
            "location": "/datepicker/options/#persianleapyearmode-string", 
            "text": "Persian calendar leap year calculation mode, available options: 'algorithmic', 'astronomical'  Kind : static property of  persian  Default :  algorithmic  Link : http://babakhani.github.io/PersianWebToolkit/doc/persian-date/leapyear  Since : 1.0.0", 
            "title": "persian.leapYearMode : string"
        }, 
        {
            "location": "/datepicker/options/#calendargregorian-object", 
            "text": "Gregorian calendar configuration  Kind : static property of  calendar  Since : 1.0.0     .gregorian  :  object  .locale  :  string  .showHint  :  boolean", 
            "title": "calendar.gregorian : object"
        }, 
        {
            "location": "/datepicker/options/#gregorianlocale-string", 
            "text": "set locale of Gregorian calendar available options: 'fa', 'en'  Kind : static property of  gregorian  Default :  en  Since : 1.0.0", 
            "title": "gregorian.locale : string"
        }, 
        {
            "location": "/datepicker/options/#gregorianshowhint-boolean", 
            "text": "if set true, small date hint of this calendar will be shown on another calendar  Kind : static property of  gregorian  Default :  false  Since : 1.0.0", 
            "title": "gregorian.showHint : boolean"
        }, 
        {
            "location": "/datepicker/options/#configresponsive-boolean", 
            "text": "if set true make enable responsive view on mobile devices  Kind : static property of  Config  Default :  true  Since : 1.0.0", 
            "title": "Config.responsive : boolean"
        }, 
        {
            "location": "/datepicker/options/#configinline-boolean", 
            "text": "if true datepicker render inline  Kind : static property of  Config  Default :  false", 
            "title": "Config.inline : boolean"
        }, 
        {
            "location": "/datepicker/options/#configinitialvalue-boolean", 
            "text": "If set true datepicker init with input value date, use data-date property when you want set inline datepicker initial value  Kind : static property of  Config  Default :  true", 
            "title": "Config.initialValue : boolean"
        }, 
        {
            "location": "/datepicker/options/#configinitialvaluetype-boolean", 
            "text": "Initial value calendar type, accept: 'persian', 'gregorian'  Kind : static property of  Config  Default :  true", 
            "title": "Config.initialValueType : boolean"
        }, 
        {
            "location": "/datepicker/options/#configpersiandigit-boolean", 
            "text": "Deprecated  from v1.0.0 this options is deprecated, use calendar.persian.locale instead  Kind : static property of  Config  Default :  true", 
            "title": "Config.persianDigit : boolean"
        }, 
        {
            "location": "/datepicker/options/#configviewmode-string", 
            "text": "default view mode, Acceptable value : day,month,year  Kind : static property of  Config  Default :  day", 
            "title": "Config.viewMode : string"
        }, 
        {
            "location": "/datepicker/options/#configformat-boolean", 
            "text": "the date format, combination of d, dd, m, mm, yy, yyyy.  Kind : static property of  Config  Default :  LLLL  Link : http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format", 
            "title": "Config.format : boolean"
        }, 
        {
            "location": "/datepicker/options/#configaltfield-boolean", 
            "text": "An input element that is to be updated with the selected date from the datepicker. Use the altFormat option to change the format of the date within this field. Leave as blank for no alternate field. acceptable value: : '#elementId','.element-class'  Kind : static property of  Config  Default :  false  Example     altField :   #inputAltFirld  altField :   .input-alt-field", 
            "title": "Config.altField : boolean"
        }, 
        {
            "location": "/datepicker/options/#configaltformat-string", 
            "text": "the date format, combination of d, dd, m, mm, yy, yyyy.  Kind : static property of  Config  Default :  unix  Link : http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format", 
            "title": "Config.altFormat : string"
        }, 
        {
            "location": "/datepicker/options/#configmindate-date", 
            "text": "Set min date on datepicker, prevent user select date before given unix time  Kind : static property of  Config  Default :  null  Properties  \n   \n     \n       Name \n     \n   \n    \n     minDate", 
            "title": "Config.minDate : Date"
        }, 
        {
            "location": "/datepicker/options/#configmaxdate-date", 
            "text": "Set max date on datepicker, prevent user select date after given unix time  Kind : static property of  Config  Default :  null  Properties  \n   \n     \n       Name \n     \n   \n    \n     maxDate", 
            "title": "Config.maxDate : Date"
        }, 
        {
            "location": "/datepicker/options/#confignavigator-object", 
            "text": "navigator config object  Kind : static property of  Config  Default :  true      .navigator  :  object  .enabled  :  boolean  .scroll  :  object  .enabled  :  boolean    .text  .btnNextText  .btnPrevText    \"onNext\"  \"onPrev\"  \"onSwitch\"", 
            "title": "Config.navigator : object"
        }, 
        {
            "location": "/datepicker/options/#navigatorenabled-boolean", 
            "text": "make navigator enable or disable  Kind : static property of  navigator  Default :  true", 
            "title": "navigator.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#navigatorscroll-object", 
            "text": "scroll navigation options  Kind : static property of  navigator", 
            "title": "navigator.scroll : object"
        }, 
        {
            "location": "/datepicker/options/#scrollenabled-boolean", 
            "text": "if you want make disable scroll navigation set this option false  Kind : static property of  scroll  Default :  true", 
            "title": "scroll.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#navigatortext", 
            "text": "navigator text config object  Kind : static property of  navigator      .text  .btnNextText  .btnPrevText", 
            "title": "navigator.text"
        }, 
        {
            "location": "/datepicker/options/#textbtnnexttext", 
            "text": "text of next button  Kind : static property of  text  Default :", 
            "title": "text.btnNextText"
        }, 
        {
            "location": "/datepicker/options/#textbtnprevtext", 
            "text": "text of prev button  Kind : static property of  text  Default: : ' '", 
            "title": "text.btnPrevText"
        }, 
        {
            "location": "/datepicker/options/#onnext", 
            "text": "Called when navigator goes to next state  Kind : event emitted by  navigator  Example     function   ( navigator )   { \n      //log( navigator next  ); \n  }", 
            "title": "\"onNext\""
        }, 
        {
            "location": "/datepicker/options/#onprev", 
            "text": "Called when navigator goes to previews state  Kind : event emitted by  navigator  Example     function   ( navigator )   { \n      //log( navigator prev  ); \n  }", 
            "title": "\"onPrev\""
        }, 
        {
            "location": "/datepicker/options/#onswitch", 
            "text": "Called when navigator switch  Kind : event emitted by  navigator  Example     function   ( datepickerObject )   { \n                 // console.log( navigator switch  ); \n  }", 
            "title": "\"onSwitch\""
        }, 
        {
            "location": "/datepicker/options/#configtoolbox-object", 
            "text": "toolbox config object  Kind : static property of  Config  Default :  true      .toolbox  :  object  .enabled  :  boolean  .text  :  object  .btnToday  :  string    .submitButton  .enabled  :  boolean  .text  :  object  .fa  :  object  .en  :  object    \"onSubmit\"    .todayButton  .enabled  :  boolean  .text  :  object  .fa  :  object  .en  :  object    \"onToday\"    .calendarSwitch  :  object  .enabled  :  boolean  .format  :  string  \"onSwitch\"    \"onToday\" (toolbox)", 
            "title": "Config.toolbox : object"
        }, 
        {
            "location": "/datepicker/options/#toolboxenabled-boolean", 
            "text": "boolean option that make toolbar enable or disable  Kind : static property of  toolbox  Default :  true", 
            "title": "toolbox.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#toolboxtext-object", 
            "text": "Deprecated  toolbox button text configuration  Kind : static property of  toolbox", 
            "title": "toolbox.text : object"
        }, 
        {
            "location": "/datepicker/options/#textbtntoday-string", 
            "text": "Deprecated  text of today button, deprecated from 1.0.0  Kind : static property of  text  Default :  \u0627\u0645\u0631\u0648\u0632", 
            "title": "text.btnToday : string"
        }, 
        {
            "location": "/datepicker/options/#toolboxsubmitbutton", 
            "text": "submit button configuration (only shown on mobile)  Kind : static property of  toolbox  Since : 1.0.0     .submitButton  .enabled  :  boolean  .text  :  object  .fa  :  object  .en  :  object    \"onSubmit\"", 
            "title": "toolbox.submitButton"
        }, 
        {
            "location": "/datepicker/options/#submitbuttonenabled-boolean", 
            "text": "make submit button enable or disable  Kind : static property of  submitButton  Default :  false  Since : 1.0.0", 
            "title": "submitButton.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#submitbuttontext-object", 
            "text": "submit button text  Kind : static property of  submitButton  Since : 1.0.0     .text  :  object  .fa  :  object  .en  :  object", 
            "title": "submitButton.text : object"
        }, 
        {
            "location": "/datepicker/options/#textfa-object", 
            "text": "show when current calendar is Persian  Kind : static property of  text  Default :  \u062a\u0627\u06cc\u06cc\u062f  Since : 1.0.0", 
            "title": "text.fa : object"
        }, 
        {
            "location": "/datepicker/options/#texten-object", 
            "text": "show when current calendar is Gregorian  Kind : static property of  text  Default :  submit  Since : 1.0.0", 
            "title": "text.en : object"
        }, 
        {
            "location": "/datepicker/options/#onsubmit", 
            "text": "Called when submit button clicked  Kind : event emitted by  submitButton  Since : 1.0.0", 
            "title": "\"onSubmit\""
        }, 
        {
            "location": "/datepicker/options/#toolboxtodaybutton", 
            "text": "toolbox today button configuration  Kind : static property of  toolbox  Since : 1.0.0     .todayButton  .enabled  :  boolean  .text  :  object  .fa  :  object  .en  :  object    \"onToday\"", 
            "title": "toolbox.todayButton"
        }, 
        {
            "location": "/datepicker/options/#todaybuttonenabled-boolean", 
            "text": "make toolbox today button enable or disable  Kind : static property of  todayButton  Since : 1.0.0", 
            "title": "todayButton.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#todaybuttontext-object", 
            "text": "today button text  Kind : static property of  todayButton  Since : 1.0.0     .text  :  object  .fa  :  object  .en  :  object", 
            "title": "todayButton.text : object"
        }, 
        {
            "location": "/datepicker/options/#textfa-object_1", 
            "text": "show when current calendar is Persian  Kind : static property of  text  Default :  \u0627\u0645\u0631\u0648\u0632  Since : 1.0.0", 
            "title": "text.fa : object"
        }, 
        {
            "location": "/datepicker/options/#texten-object_1", 
            "text": "show when current calendar is Gregorian  Kind : static property of  text  Default :  today  Since : 1.0.0", 
            "title": "text.en : object"
        }, 
        {
            "location": "/datepicker/options/#ontoday", 
            "text": "Called when today button clicked  Kind : event emitted by  todayButton  Since : 1.0.0", 
            "title": "\"onToday\""
        }, 
        {
            "location": "/datepicker/options/#toolboxcalendarswitch-object", 
            "text": "toolbox calendar switch configuration  Kind : static property of  toolbox  Since : 1.0.0     .calendarSwitch  :  object  .enabled  :  boolean  .format  :  string  \"onSwitch\"", 
            "title": "toolbox.calendarSwitch : object"
        }, 
        {
            "location": "/datepicker/options/#calendarswitchenabled-boolean", 
            "text": "make calendar switch enable or disable  Kind : static property of  calendarSwitch  Default :  true  Since : 1.0.0", 
            "title": "calendarSwitch.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#calendarswitchformat-string", 
            "text": "calendar switch text format string  Kind : static property of  calendarSwitch  Default :  MMMM  Link : http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format  Since : 1.0.0", 
            "title": "calendarSwitch.format : string"
        }, 
        {
            "location": "/datepicker/options/#onswitch_1", 
            "text": "Called when calendar switch clicked  Kind : event emitted by  calendarSwitch  Since : 1.0.0", 
            "title": "\"onSwitch\""
        }, 
        {
            "location": "/datepicker/options/#ontoday-toolbox", 
            "text": "Deprecated  Kind : event emitted by  toolbox  \n   \n     \n       Param \n     \n   \n    \n     toolbox \n          Example     function   ( toolbox )   { \n      //log( toolbox today btn ); \n  }", 
            "title": "\"onToday\" (toolbox)"
        }, 
        {
            "location": "/datepicker/options/#configonlytimepicker-boolean", 
            "text": "if true all pickers hide and just show timepicker  Kind : static property of  Config  Default :  false", 
            "title": "Config.onlyTimePicker : boolean"
        }, 
        {
            "location": "/datepicker/options/#configonlyselectondate-boolean", 
            "text": "if true date select just by click on day in month grid, and when user select month or year selected date doesnt change  Kind : static property of  Config  Default: : true  Properties  \n   \n     \n       Name \n     \n   \n    \n     justSelectOnDate", 
            "title": "Config.onlySelectOnDate : boolean"
        }, 
        {
            "location": "/datepicker/options/#configtimepicker-object", 
            "text": "timePicker configuration  Kind : static property of  Config      .timePicker  :  object  .enabled  :  boolean  .step  :  number  .hour  :  object  .enabled  :  boolean  .step  :  boolean    .minute  :  object  .enabled  :  boolean  .step  :  boolean    .second  :  object  .enabled  :  boolean  .step  :  boolean    .meridian  :  object  .enabled  :  boolean", 
            "title": "Config.timePicker : object"
        }, 
        {
            "location": "/datepicker/options/#timepickerenabled-boolean", 
            "text": "make timePicker enable or disable  Kind : static property of  timePicker", 
            "title": "timePicker.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#timepickerstep-number", 
            "text": "The amount that increases or decreases by pressing the button  Kind : static property of  timePicker", 
            "title": "timePicker.step : number"
        }, 
        {
            "location": "/datepicker/options/#timepickerhour-object", 
            "text": "hour selector configuration  Kind : static property of  timePicker      .hour  :  object  .enabled  :  boolean  .step  :  boolean", 
            "title": "timePicker.hour : object"
        }, 
        {
            "location": "/datepicker/options/#hourenabled-boolean", 
            "text": "make hour selector enable or disable  Kind : static property of  hour", 
            "title": "hour.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#hourstep-boolean", 
            "text": "The amount that increases or decreases hour, by pressing the button. overwrite by timepicker.step  Kind : static property of  hour", 
            "title": "hour.step : boolean"
        }, 
        {
            "location": "/datepicker/options/#timepickerminute-object", 
            "text": "minute selector configuration  Kind : static property of  timePicker      .minute  :  object  .enabled  :  boolean  .step  :  boolean", 
            "title": "timePicker.minute : object"
        }, 
        {
            "location": "/datepicker/options/#minuteenabled-boolean", 
            "text": "make minute selector enable or disable  Kind : static property of  minute", 
            "title": "minute.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#minutestep-boolean", 
            "text": "overwrite by parent step  Kind : static property of  minute", 
            "title": "minute.step : boolean"
        }, 
        {
            "location": "/datepicker/options/#timepickersecond-object", 
            "text": "second selector configuration  Kind : static property of  timePicker      .second  :  object  .enabled  :  boolean  .step  :  boolean", 
            "title": "timePicker.second : object"
        }, 
        {
            "location": "/datepicker/options/#secondenabled-boolean", 
            "text": "make second selector enable or disable  Kind : static property of  second", 
            "title": "second.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#secondstep-boolean", 
            "text": "The amount that increases or decreases second, by pressing the button. overwrite by timepicker.step  Kind : static property of  second", 
            "title": "second.step : boolean"
        }, 
        {
            "location": "/datepicker/options/#timepickermeridian-object", 
            "text": "meridian selector configuration  Kind : static property of  timePicker", 
            "title": "timePicker.meridian : object"
        }, 
        {
            "location": "/datepicker/options/#meridianenabled-boolean", 
            "text": "if you set this as false, datepicker timepicker system moved to 24-hour system  Kind : static property of  meridian", 
            "title": "meridian.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#configdaypicker-object", 
            "text": "dayPicker configuration  Kind : static property of  Config      .dayPicker  :  object  .enabled  :  boolean  .titleFormat  :  string  .titleFormatter(year, month)  \u21d2  *  \"onSelect\" (selectedDayUnix)", 
            "title": "Config.dayPicker : object"
        }, 
        {
            "location": "/datepicker/options/#daypickerenabled-boolean", 
            "text": "make daypicker enable or disable  Kind : static property of  dayPicker  Default :  true", 
            "title": "dayPicker.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#daypickertitleformat-string", 
            "text": "daypicker title format string  Kind : static property of  dayPicker  Default :  YYYY MMMM  Link : http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format", 
            "title": "dayPicker.titleFormat : string"
        }, 
        {
            "location": "/datepicker/options/#daypickertitleformatteryear-month-42", 
            "text": "daypicker title formatter function  Kind : static method of  dayPicker  \n   \n     \n       Param \n     \n   \n    \n     year \n     \n     month", 
            "title": "dayPicker.titleFormatter(year, month) \u21d2 *"
        }, 
        {
            "location": "/datepicker/options/#onselect-selecteddayunix", 
            "text": "fired when user select date  Kind : event emitted by  dayPicker  \n   \n     \n       Param \n     \n   \n    \n     selectedDayUnix", 
            "title": "\"onSelect\" (selectedDayUnix)"
        }, 
        {
            "location": "/datepicker/options/#configmonthpicker-object", 
            "text": "monthPicker configuration  Kind : static property of  Config      .monthPicker  :  object  .enabled  :  boolean  .titleFormat  :  string  .titleFormatter(unix)  \u21d2  *  \"onSelect\" (monthIndex)", 
            "title": "Config.monthPicker : object"
        }, 
        {
            "location": "/datepicker/options/#monthpickerenabled-boolean", 
            "text": "make monthPicker enable or disable  Kind : static property of  monthPicker  Default :  true", 
            "title": "monthPicker.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#monthpickertitleformat-string", 
            "text": "monthPicker title format string  Kind : static property of  monthPicker  Default :  YYYY", 
            "title": "monthPicker.titleFormat : string"
        }, 
        {
            "location": "/datepicker/options/#monthpickertitleformatterunix-42", 
            "text": "monthPicker title formatter function  Kind : static method of  monthPicker  \n   \n     \n       Param \n     \n   \n    \n     unix", 
            "title": "monthPicker.titleFormatter(unix) \u21d2 *"
        }, 
        {
            "location": "/datepicker/options/#onselect-monthindex", 
            "text": "fired when user select month  Kind : event emitted by  monthPicker  \n   \n     \n       Param \n     \n   \n    \n     monthIndex", 
            "title": "\"onSelect\" (monthIndex)"
        }, 
        {
            "location": "/datepicker/options/#configyearpicker-object", 
            "text": "yearPicker configuration  Kind : static property of  Config      .yearPicker  :  object  .enabled  :  boolean  .titleFormat  :  string  .titleFormatter(year)  \u21d2  string  \"onSelect\" (year)", 
            "title": "Config.yearPicker : object"
        }, 
        {
            "location": "/datepicker/options/#yearpickerenabled-boolean", 
            "text": "make yearPicker enable or disable  Kind : static property of  yearPicker  Default :  true", 
            "title": "yearPicker.enabled : boolean"
        }, 
        {
            "location": "/datepicker/options/#yearpickertitleformat-string", 
            "text": "yearPicker title format string  Kind : static property of  yearPicker  Default :  YYYY", 
            "title": "yearPicker.titleFormat : string"
        }, 
        {
            "location": "/datepicker/options/#yearpickertitleformatteryear-string", 
            "text": "yearPicker title formatter function  Kind : static method of  yearPicker  \n   \n     \n       Param \n     \n   \n    \n     year", 
            "title": "yearPicker.titleFormatter(year) \u21d2 string"
        }, 
        {
            "location": "/datepicker/options/#onselect-year", 
            "text": "fired when user select year  Kind : event emitted by  yearPicker  \n   \n     \n       Param \n     \n   \n    \n     year", 
            "title": "\"onSelect\" (year)"
        }, 
        {
            "location": "/datepicker/options/#configposition-string-124-array", 
            "text": "position of datepicker relative to input element  Kind : static property of  Config  Default :  auto  Example     position :   auto  position :   [ 10 , 10 ]", 
            "title": "Config.position : string | array"
        }, 
        {
            "location": "/datepicker/options/#configautoclose-boolean", 
            "text": "If true datepicker close When select a date  Kind : static property of  Config  Default :  false", 
            "title": "Config.autoClose : boolean"
        }, 
        {
            "location": "/datepicker/options/#configtemplate-string", 
            "text": "by default datepicker have a template string, and you can overwrite it simply by replace string in config.  Kind : static property of  Config  Example     div   id = plotId   class = datepicker-plot-area datepicker-plot-area-inline-view \n      {{ # navigator . enabled }} \n      div   class = navigator \n      div   class = datepicker-header \n      div   class = btn btn-next {{ navigator . text . btnNextText }} /div \n      div   class = btn btn-switch {{   navigator . switch . text   }} /div \n      div   class = btn btn-prev {{ navigator . text . btnPrevText }} /div \n      /div \n      /div \n      {{ /navigator.enabled}} \n      div   class = datepicker-grid-view   \n      {{ # days . enabled }} \n      {{ # days . viewMode }} \n      div   class = datepicker-day-view   \n      div   class = month-grid-box \n      div   class = header \n      div   class = title /div \n      div   class = header-row \n      div   class = header-row-cell \u0634 /div \n      div   class = header-row-cell \u06cc /div \n      div   class = header-row-cell \u062f /div \n      div   class = header-row-cell \u0633 /div \n      div   class = header-row-cell \u0686 /div \n      div   class = header-row-cell \u067e /div \n      div   class = header-row-cell \u062c /div \n      /div \n      /div \n      table   cellspacing = 0   class = table-days \n      tbody \n      {{ # days . list }} \n\n      tr \n      {{ # .}} \n\n      {{ # enabled }} \n      td   data - unix = {{dataUnix}}   span    class = {{#otherMonth}}other-month{{/otherMonth}} {{#selected}}selected{{/selected}} {{ title }} /span /td \n      {{ /enabled}} \n      {{ ^ enabled }} \n      td   data - unix = {{dataUnix}}   class = disabled span   class = {{#otherMonth}}other-month{{/otherMonth}} {{ title }} /span /td \n      {{ /enabled}} \n\n      {{ /.}} \n      /tr \n      {{ /days.list}} \n      /tbody \n      /table \n      /div \n      /div \n      {{ /days.viewMode}} \n      {{ /days.enabled}} \n\n      {{ # month . enabled }} \n      {{ # month . viewMode }} \n      div   class = datepicker-month-view \n      {{ # month . list }} \n      {{ # enabled }} \n      div   data - month = {{dataMonth}}   class = month-item {{#selected}}selected{{/selected}} {{ title }} /small /div \n      {{ /enabled}} \n      {{ ^ enabled }} \n      div   data - month = {{dataMonth}}   class = month-item month-item-disable {{#selected}}selected{{/selected}} {{ title }} /small /div \n      {{ /enabled}} \n      {{ /month.list}} \n      /div \n      {{ /month.viewMode}} \n      {{ /month.enabled}} \n\n      {{ # year . enabled   }} \n      {{ # year . viewMode   }} \n      div   class = datepicker-year-view   \n      {{ # year . list }} \n      {{ # enabled }} \n      div   data - year = {{dataYear}}   class = year-item {{#selected}}selected{{/selected}} {{ title }} /div \n      {{ /enabled}} \n      {{ ^ enabled }} \n      div   data - year = {{dataYear}}   class = year-item year-item-disable {{#selected}}selected{{/selected}} {{ title }} /div \n      {{ /enabled}} \n      {{ /year.list}} \n      /div \n      {{ /year.viewMode }} \n      {{ /year.enabled }} \n\n      /div \n      {{ # time }} \n      {{ # enabled }} \n      div   class = datepicker-time-view \n      {{ # hour . enabled }} \n      div   class = hour time-segment   data - time - key = hour \n      div   class = up-btn   data - time - key = hour \u25b2 /div \n      input   value = {{hour.title}}   type = text   placeholder = hour   class = hour-input \n      div   class = down-btn   data - time - key = hour \u25bc /div \n      /div \n      div   class = divider : /div \n      {{ /hour.enabled}} \n      {{ # minute . enabled }} \n      div   class = minute time-segment   data - time - key = minute   \n      div   class = up-btn   data - time - key = minute \u25b2 /div \n      input   value = {{minute.title}}   type = text   placeholder = minute   class = minute-input \n      div   class = down-btn   data - time - key = minute \u25bc /div \n      /div \n      div   class = divider second-divider : /div \n      {{ /minute.enabled}} \n      {{ # second . enabled }} \n      div   class = second time-segment   data - time - key = second    \n      div   class = up-btn   data - time - key = second   \u25b2 /div \n      input   value = {{second.title}}    type = text   placeholder = second   class = second-input \n      div   class = down-btn   data - time - key = second   \u25bc /div \n      /div \n      div   class = divider meridian-divider /div \n      div   class = divider meridian-divider /div \n      {{ /second.enabled}} \n      {{ # meridian . enabled }} \n      div   class = meridian time-segment   data - time - key = meridian   \n      div   class = up-btn   data - time - key = meridian \u25b2 /div \n      input   value = {{meridian.title}}   type = text   class = meridian-input \n      div   class = down-btn   data - time - key = meridian \u25bc /div \n      /div \n      {{ /meridian.enabled}} \n      /div \n      {{ /enabled}} \n      {{ /time}} \n\n      {{ # toolbox }} \n      {{ # enabled }} \n      div   class = toolbox  \n      div   class = btn-today {{ text . btnToday }} /div \n      /div \n      {{ /enabled}} \n      {{ /toolbox}} \n      /div", 
            "title": "Config.template : string"
        }, 
        {
            "location": "/datepicker/options/#configobserver-boolean", 
            "text": "if true datepicker update self by user inputted date string, accept 'yyyy/mm/dd'  Kind : static property of  Config  Default :  false  Example     1396/10/2 ,", 
            "title": "Config.observer : boolean"
        }, 
        {
            "location": "/datepicker/options/#configinputdelay-number", 
            "text": "waite time for last user key-down event, accept millisecond  Kind : static property of  Config  Default :  800", 
            "title": "Config.inputDelay : number"
        }, 
        {
            "location": "/datepicker/options/#configformatterunixdate", 
            "text": "format value of input  Kind : static method of  Config  Default :  function  \n   \n     \n       Param \n     \n   \n    \n     unixDate \n          Example     function   ( unixDate )   { \n      var   self   =   this ; \n      var   pdate   =   new   persianDate ( unixDate ); \n      pdate . formatPersian   =   this . persianDigit ; \n      return   pdate . format ( self . format ); \n  }", 
            "title": "Config.formatter(unixDate)"
        }, 
        {
            "location": "/datepicker/options/#configaltfieldformatterunixdate", 
            "text": "format value of 'altField' input  Kind : static method of  Config  Default :  function  \n   \n     \n       Param \n     \n   \n    \n     unixDate \n          Example     function   ( unixDate )   { \n      var   self   =   this ; \n      var   thisAltFormat   =   self . altFormat . toLowerCase (); \n      if   ( thisAltFormat   ===   gregorian   ||   thisAltFormat   ===   g )   { \n          return   new   Date ( unixDate ); \n      } \n      if   ( thisAltFormat   ===   unix   ||   thisAltFormat   ===   u )   { \n          return   unixDate ; \n      } \n      else   { \n          var   pd   =   new   persianDate ( unixDate ); \n          pd . formatPersian   =   this . persianDigit ; \n          return   pd . format ( self . altFormat ); \n      } \n  }", 
            "title": "Config.altFieldFormatter(unixDate)"
        }, 
        {
            "location": "/datepicker/options/#configcheckdate-function", 
            "text": "Validate date access before render  Kind : static method of  Config", 
            "title": "Config.checkDate() : function"
        }, 
        {
            "location": "/datepicker/options/#configcheckmonth-function", 
            "text": "Validate month access before render  Kind : static method of  Config", 
            "title": "Config.checkMonth() : function"
        }, 
        {
            "location": "/datepicker/options/#configcheckyear-function", 
            "text": "Validate year access before render  Kind : static method of  Config", 
            "title": "Config.checkYear() : function"
        }, 
        {
            "location": "/datepicker/options/#onselect-unixdate", 
            "text": "Called when date Select by user.  Kind : event emitted by  Config  \n   \n     \n       Param \n     \n   \n    \n     unixDate", 
            "title": "\"onSelect\" (unixDate)"
        }, 
        {
            "location": "/datepicker/options/#onset-unixdate", 
            "text": "Called when date Select by api.  Kind : event emitted by  Config  \n   \n     \n       Param \n     \n   \n    \n     unixDate", 
            "title": "\"onSet\" (unixDate)"
        }, 
        {
            "location": "/datepicker/options/#onshow", 
            "text": "A function that takes current datepicker instance. It is called just before the datepicker is displayed.  Kind : event emitted by  Config", 
            "title": "\"onShow\""
        }, 
        {
            "location": "/datepicker/options/#onhide", 
            "text": "A function that takes current datepicker instance. It is called just before the datepicker Hide.  Kind : event emitted by  Config", 
            "title": "\"onHide\""
        }, 
        {
            "location": "/datepicker/options/#ontoggle", 
            "text": "on toggle datepicker event  Kind : event emitted by  Config", 
            "title": "\"onToggle\""
        }, 
        {
            "location": "/datepicker/options/#ondestroy", 
            "text": "on destroy datepicker event  Kind : event emitted by  Config", 
            "title": "\"onDestroy\""
        }, 
        {
            "location": "/datepicker/api/", 
            "text": "API\n\n\nThis is the API documentation for persian-datepicker\n\n\nKind\n: global class  \n\n\n\n\nAPI\n\n\n.options\n\n\n.options\n\n\n.show()\n\n\n.getState()\n\n\n.hide()\n\n\n.toggle()\n\n\n.destroy()\n\n\n.setDate(unix)\n\n\n\n\n\n\n\n\n\n\napI.options\n\n\nget current option object\n\n\nKind\n: instance property of \nAPI\n\n\nExample\n  \n\n\nvar\n \npd\n \n=\n \n$\n(\n.selector\n).\npersianDatepicker\n();\n\n\nconsole\n.\nlog\n(\npd\n.\noptions\n);\n\n\n\n\n\n\n\n\napI.options\n\n\nset options live\n\n\nKind\n: instance property of \nAPI\n\n\nExample\n  \n\n\nvar\n \npd\n \n=\n \n$\n(\n.selector\n).\npersianDatepicker\n();\n\n\npd\n.\noptions\n;\n\n\n//return current options\n\n\npd\n.\noptions\n \n=\n \n{};\n\n\n// set options and render datepicker with new options\n\n\n\n\n\n\n\n\napI.show()\n\n\nmake datepicker visible\n\n\nKind\n: instance method of \nAPI\n\n\nExample\n  \n\n\nvar\n \npd\n \n=\n \n$\n(\n.selector\n).\npersianDatepicker\n();\n\n\npd\n.\nshow\n();\n\n\n\n\n\n\n\n\napI.getState()\n\n\nreturn datepicker current state\n\n\nKind\n: instance method of \nAPI\n\n\nSince\n: 1.0.0\n\n\nExample\n  \n\n\nvar\n \npd\n \n=\n \n$\n(\n.selector\n).\npersianDatepicker\n();\n\n\nvar\n \nstate\n \n=\n \npd\n.\ngetState\n();\n\n\n\nconsole\n.\nlog\n(\nstate\n.\nselected\n);\n\n\nconsole\n.\nlog\n(\nstate\n.\nview\n);\n\n\n\n\n\n\n\n\napI.hide()\n\n\nmake datepicker invisible\n\n\nKind\n: instance method of \nAPI\n\n\nExample\n  \n\n\nvar\n \npd\n \n=\n \n$\n(\n.selector\n).\npersianDatepicker\n();\n\n\npd\n.\nshow\n();\n\n\n\n\n\n\n\n\napI.toggle()\n\n\ntoggle datepicker visibility state\n\n\nKind\n: instance method of \nAPI\n\n\nExample\n  \n\n\nvar\n \npd\n \n=\n \n$\n(\n.selector\n).\npersianDatepicker\n();\n\n\npd\n.\ntoggle\n();\n\n\n\n\n\n\n\n\napI.destroy()\n\n\ndestroy every thing clean dom and\n\n\nKind\n: instance method of \nAPI\n\n\nExample\n  \n\n\nvar\n \npd\n \n=\n \n$\n(\n.selector\n).\npersianDatepicker\n();\n\n\npd\n.\ndestroy\n();\n\n\n\n\n\n\n\n\napI.setDate(unix)\n\n\nset selected date of datepicker accept unix timestamp\n\n\nKind\n: instance method of \nAPI\n\n\n\n  \n\n    \n\n      \nParam\n\n    \n\n  \n\n  \n\n\n\n    \nunix\n\n    \n  \n\n\n\n\nExample\n  \n\n\nvar\n \npd\n \n=\n \n$\n(\n.selector\n).\npersianDatepicker\n();\n\n\npd\n.\nsetDate\n(\n1382276091100\n)", 
            "title": "API"
        }, 
        {
            "location": "/datepicker/api/#api", 
            "text": "This is the API documentation for persian-datepicker  Kind : global class     API  .options  .options  .show()  .getState()  .hide()  .toggle()  .destroy()  .setDate(unix)", 
            "title": "API"
        }, 
        {
            "location": "/datepicker/api/#apioptions", 
            "text": "get current option object  Kind : instance property of  API  Example     var   pd   =   $ ( .selector ). persianDatepicker ();  console . log ( pd . options );", 
            "title": "apI.options"
        }, 
        {
            "location": "/datepicker/api/#apioptions_1", 
            "text": "set options live  Kind : instance property of  API  Example     var   pd   =   $ ( .selector ). persianDatepicker ();  pd . options ;  //return current options  pd . options   =   {};  // set options and render datepicker with new options", 
            "title": "apI.options"
        }, 
        {
            "location": "/datepicker/api/#apishow", 
            "text": "make datepicker visible  Kind : instance method of  API  Example     var   pd   =   $ ( .selector ). persianDatepicker ();  pd . show ();", 
            "title": "apI.show()"
        }, 
        {
            "location": "/datepicker/api/#apigetstate", 
            "text": "return datepicker current state  Kind : instance method of  API  Since : 1.0.0  Example     var   pd   =   $ ( .selector ). persianDatepicker ();  var   state   =   pd . getState ();  console . log ( state . selected );  console . log ( state . view );", 
            "title": "apI.getState()"
        }, 
        {
            "location": "/datepicker/api/#apihide", 
            "text": "make datepicker invisible  Kind : instance method of  API  Example     var   pd   =   $ ( .selector ). persianDatepicker ();  pd . show ();", 
            "title": "apI.hide()"
        }, 
        {
            "location": "/datepicker/api/#apitoggle", 
            "text": "toggle datepicker visibility state  Kind : instance method of  API  Example     var   pd   =   $ ( .selector ). persianDatepicker ();  pd . toggle ();", 
            "title": "apI.toggle()"
        }, 
        {
            "location": "/datepicker/api/#apidestroy", 
            "text": "destroy every thing clean dom and  Kind : instance method of  API  Example     var   pd   =   $ ( .selector ). persianDatepicker ();  pd . destroy ();", 
            "title": "apI.destroy()"
        }, 
        {
            "location": "/datepicker/api/#apisetdateunix", 
            "text": "set selected date of datepicker accept unix timestamp  Kind : instance method of  API  \n   \n     \n       Param \n     \n   \n    \n     unix \n          Example     var   pd   =   $ ( .selector ). persianDatepicker ();  pd . setDate ( 1382276091100 )", 
            "title": "apI.setDate(unix)"
        }, 
        {
            "location": "/datepicker/changelog/", 
            "text": "Change Log\n\n\nAll notable changes to this project will be documented in this file.\n\n\nThe format is based on \nKeep a Changelog\n \nand this project adheres to \nSemantic Versioning\n.\n\n\n[1.2.0] - 2019-07-07\n\n\n\n\nFix issue in month selector that cause selecting month in other years doesnt\n    affect selected date year\n\n\nFix \n#279\n\n\nFix \n#288\n\n\n\n\n[1.1.5] - 2018-2-25\n\n\n\n\nFix \n#275\n\n\n\n\n[1.1.4] - 2018-2-20\n\n\n\n\nFix \n#275\n\n\nFix \n#276\n\n\nFix \n#245\n\n\nFix \n#172\n\n\nFix \n#238\n\n\nFix \n#216\n\n\nFix \n#177\n\n\nFix \n#259\n\n\n\n\n[1.1.3] - 2018-2-13\n\n\n\n\nFix \n#207\n\n\n\n\n[1.1.2] - 2018-2-11\n\n\n\n\nFix \n#208\n\n\nFix \n#203\n\n\n\n\n[1.1.1] - 2018-1-27\n\n\n\n\nFix \n#202\n\n\nFix \n#203\n\n\n\n\n[1.1.0] - 2017-12-24\n\n\n\n\nFix \n#190\n\n\nFix \n#189\n\n\nFix \n#187\n\n\nFix \n#183\n\n\nFix \n#182\n\n\nFix \n#168\n\n\n\n\n[1.0.2] - 2017-10-1\n\n\n\n\nFix dependency version\n\n\n\n\n[1.0.0] - 2017-10-1\n\n\n\n\nAdd gregorian calendar type\n\n\nAdd locale\n\n\nMake better user interface\n\n\nAdd responsive option\n\n\nAdd onSet event, that called when selected date changed by api\n\n\nExpose datepicker state with api (getState())\n\n\nAdd range selector with order validation example in doc\n\n\nImprove options set method to make better live configuration\n\n\nSeparate select event of user (click touch etc) and api\n\n\nDeprecate toolbox.text, toolbox.text.btnToday, persianDigit, toolbox.onToday\n\n\n\n\n[0.5.10]\n\n\n\n\nHotfix time plot wheel error\n\n\n\n\n[0.5.9]\n\n\n\n\nFix #154 #153 #152 #151 #150 #148 github issues\n\n\n\n\n[0.5.5]\n\n\n\n\nFix days rendering\n\n\nFix readme\n\n\n\n\n[0.5.4]\n\n\n\n\nFix document\n\n\nWorks before beta release\n\n\n\n\n[0.5.0]\n\n\n\n\nRefactor all code to es6\n\n\n\n\n[0.1.7] 2013-09-21\n\n\n\n\nFirst release", 
            "title": "Change log"
        }, 
        {
            "location": "/datepicker/changelog/#change-log", 
            "text": "All notable changes to this project will be documented in this file.  The format is based on  Keep a Changelog  \nand this project adheres to  Semantic Versioning .", 
            "title": "Change Log"
        }, 
        {
            "location": "/datepicker/changelog/#120-2019-07-07", 
            "text": "Fix issue in month selector that cause selecting month in other years doesnt\n    affect selected date year  Fix  #279  Fix  #288", 
            "title": "[1.2.0] - 2019-07-07"
        }, 
        {
            "location": "/datepicker/changelog/#115-2018-2-25", 
            "text": "Fix  #275", 
            "title": "[1.1.5] - 2018-2-25"
        }, 
        {
            "location": "/datepicker/changelog/#114-2018-2-20", 
            "text": "Fix  #275  Fix  #276  Fix  #245  Fix  #172  Fix  #238  Fix  #216  Fix  #177  Fix  #259", 
            "title": "[1.1.4] - 2018-2-20"
        }, 
        {
            "location": "/datepicker/changelog/#113-2018-2-13", 
            "text": "Fix  #207", 
            "title": "[1.1.3] - 2018-2-13"
        }, 
        {
            "location": "/datepicker/changelog/#112-2018-2-11", 
            "text": "Fix  #208  Fix  #203", 
            "title": "[1.1.2] - 2018-2-11"
        }, 
        {
            "location": "/datepicker/changelog/#111-2018-1-27", 
            "text": "Fix  #202  Fix  #203", 
            "title": "[1.1.1] - 2018-1-27"
        }, 
        {
            "location": "/datepicker/changelog/#110-2017-12-24", 
            "text": "Fix  #190  Fix  #189  Fix  #187  Fix  #183  Fix  #182  Fix  #168", 
            "title": "[1.1.0] - 2017-12-24"
        }, 
        {
            "location": "/datepicker/changelog/#102-2017-10-1", 
            "text": "Fix dependency version", 
            "title": "[1.0.2] - 2017-10-1"
        }, 
        {
            "location": "/datepicker/changelog/#100-2017-10-1", 
            "text": "Add gregorian calendar type  Add locale  Make better user interface  Add responsive option  Add onSet event, that called when selected date changed by api  Expose datepicker state with api (getState())  Add range selector with order validation example in doc  Improve options set method to make better live configuration  Separate select event of user (click touch etc) and api  Deprecate toolbox.text, toolbox.text.btnToday, persianDigit, toolbox.onToday", 
            "title": "[1.0.0] - 2017-10-1"
        }, 
        {
            "location": "/datepicker/changelog/#0510", 
            "text": "Hotfix time plot wheel error", 
            "title": "[0.5.10]"
        }, 
        {
            "location": "/datepicker/changelog/#059", 
            "text": "Fix #154 #153 #152 #151 #150 #148 github issues", 
            "title": "[0.5.9]"
        }, 
        {
            "location": "/datepicker/changelog/#055", 
            "text": "Fix days rendering  Fix readme", 
            "title": "[0.5.5]"
        }, 
        {
            "location": "/datepicker/changelog/#054", 
            "text": "Fix document  Works before beta release", 
            "title": "[0.5.4]"
        }, 
        {
            "location": "/datepicker/changelog/#050", 
            "text": "Refactor all code to es6", 
            "title": "[0.5.0]"
        }, 
        {
            "location": "/datepicker/changelog/#017-2013-09-21", 
            "text": "First release", 
            "title": "[0.1.7] 2013-09-21"
        }
    ]
}